<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Auto-Snapshot with dnf on Fedora | 在fedora上使用dnf自动快照</title>
    <link href="/posts/57c540de/"/>
    <url>/posts/57c540de/</url>
    
    <content type="html"><![CDATA[<p>When I was using Arch Linux, one of my favorite packages was <code>snap-pac</code>, which works elegantly with <code>pacman</code> to create snapshots before and after any update.</p><p>当我在用 Arch Linux 的时候，我最喜欢的软件包之一是 <code>snap-pac</code>，它可以和 <code>pacman</code> 优雅地配合，在任何更新前后创建快照。</p><p>After I returned to Fedora, I wanted to implement a similar process for <code>dnf</code>. However, I found the solution is a little more complicated than on Arch, especially for <code>dnf5</code>. So, this article is a step-by-step guide to set it up.</p><p>回到 Fedora 后，我想为 <code>dnf</code> 实现类似的功能。然而，我发现解决方案比 Arch 上要复杂一些，特别是对于 <code>dnf5</code>。所以，这篇文章是一个手把手的设置指南。</p><h2 id="1-Install-necessary-packages-安装必要的软件包"><a href="#1-Install-necessary-packages-安装必要的软件包" class="headerlink" title="1. Install necessary packages | 安装必要的软件包"></a>1. Install necessary packages | 安装必要的软件包</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> dnf install python3-dnf-plugin-snapper libdnf5-plugin-actions snapper -y<br></code></pre></td></tr></table></figure><h2 id="2-Setup-snapper-config-设置-snapper-配置"><a href="#2-Setup-snapper-config-设置-snapper-配置" class="headerlink" title="2. Setup snapper config | 设置 snapper 配置"></a>2. Setup snapper config | 设置 snapper 配置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> snapper -c root create-config /<br></code></pre></td></tr></table></figure><p>If you want, you can also create snapshot for &#x2F;home as well:</p><p>如果你愿意，也可以为 &#x2F;home 创建快照：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> snapper -c home create-config /home<br></code></pre></td></tr></table></figure><h2 id="3-Setup-dnf-snapper-设置-dnf-snapper"><a href="#3-Setup-dnf-snapper-设置-dnf-snapper" class="headerlink" title="3. Setup dnf-snapper | 设置 dnf-snapper"></a>3. Setup dnf-snapper | 设置 dnf-snapper</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> nano /etc/dnf/libdnf5-plugins/actions.d/snapper.actions<br></code></pre></td></tr></table></figure><p>And copy and paste the following content:</p><p>然后复制并粘贴以下内容：</p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs nix"><span class="hljs-comment"># Get the snapshot description</span><br>pre_transaction::::<span class="hljs-symbol">/usr/bin/sh</span> <span class="hljs-operator">-</span>c echo\ <span class="hljs-string">&quot;tmp.cmd=$(ps<span class="hljs-char escape_">\ </span>-o<span class="hljs-char escape_">\ </span>command<span class="hljs-char escape_">\ </span>--no-headers<span class="hljs-char escape_">\ </span>-p<span class="hljs-char escape_">\ </span>&#x27;<span class="hljs-subst">$&#123;pid&#125;</span>&#x27;)&quot;</span><br><br><span class="hljs-comment"># Creates pre snapshots for root and home and stores snapshot numbers in variables</span><br>pre_transaction::::<span class="hljs-symbol">/usr/bin/sh</span> <span class="hljs-operator">-</span>c echo\ <span class="hljs-string">&quot;tmp.snapper_pre_root=$(snapper<span class="hljs-char escape_">\ </span>-c<span class="hljs-char escape_">\ </span>root<span class="hljs-char escape_">\ </span>create<span class="hljs-char escape_">\ </span>-c<span class="hljs-char escape_">\ </span>number<span class="hljs-char escape_">\ </span>-t<span class="hljs-char escape_">\ </span>pre<span class="hljs-char escape_">\ </span>-p<span class="hljs-char escape_">\ </span>-d<span class="hljs-char escape_">\ </span>&#x27;<span class="hljs-subst">$&#123;tmp.cmd&#125;</span>&#x27;)&quot;</span><br>pre_transaction::::<span class="hljs-symbol">/usr/bin/sh</span> <span class="hljs-operator">-</span>c echo\ <span class="hljs-string">&quot;tmp.snapper_pre_home=$(snapper<span class="hljs-char escape_">\ </span>-c<span class="hljs-char escape_">\ </span>home<span class="hljs-char escape_">\ </span>create<span class="hljs-char escape_">\ </span>-c<span class="hljs-char escape_">\ </span>number<span class="hljs-char escape_">\ </span>-t<span class="hljs-char escape_">\ </span>pre<span class="hljs-char escape_">\ </span>-p<span class="hljs-char escape_">\ </span>-d<span class="hljs-char escape_">\ </span>&#x27;<span class="hljs-subst">$&#123;tmp.cmd&#125;</span>&#x27;)&quot;</span><br><br><span class="hljs-comment"># Creates post snapshots for root and home if pre snapshot numbers exist</span><br>post_transaction::::<span class="hljs-symbol">/usr/bin/sh</span> <span class="hljs-operator">-</span>c [\ <span class="hljs-operator">-</span>n\ <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;tmp.snapper_pre_root&#125;</span>&quot;</span>\ ]\ <span class="hljs-operator">&amp;&amp;</span>\ snapper\ <span class="hljs-operator">-</span>c\ root\ create\ <span class="hljs-operator">-</span>c\ number\ <span class="hljs-operator">-</span>t\ post\ <span class="hljs-operator">-</span>-pre-number\ <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;tmp.snapper_pre_root&#125;</span>&quot;</span>\ <span class="hljs-operator">-</span>d\ <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;tmp.cmd&#125;</span>&quot;</span><br>post_transaction::::<span class="hljs-symbol">/usr/bin/sh</span> <span class="hljs-operator">-</span>c [\ <span class="hljs-operator">-</span>n\ <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;tmp.snapper_pre_home&#125;</span>&quot;</span>\ ]\ <span class="hljs-operator">&amp;&amp;</span>\ snapper\ <span class="hljs-operator">-</span>c\ home\ create\ <span class="hljs-operator">-</span>c\ number\ <span class="hljs-operator">-</span>t\ post\ <span class="hljs-operator">-</span>-pre-number\ <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;tmp.snapper_pre_home&#125;</span>&quot;</span>\ <span class="hljs-operator">-</span>d\ <span class="hljs-string">&quot;<span class="hljs-subst">$&#123;tmp.cmd&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure><p>Now save and exit, and restart the computer if you can. Everything should work properly now.</p><p>现在保存并退出，如果可以的话重启电脑。一切都应该能正常工作了。</p><h2 id="Conclusion-总结"><a href="#Conclusion-总结" class="headerlink" title="Conclusion | 总结"></a>Conclusion | 总结</h2><p>Using linux OS is an infinite loop of crash and recover. And snapshot is the only thing can help us take our breath and sleep at night.</p><p>使用 Linux 操作系统就是一个无限循环的崩溃和恢复。而快照是唯一能让我们在晚上松一口气，安然入睡的东西。</p><h2 id="Reference-参考"><a href="#Reference-参考" class="headerlink" title="Reference | 参考"></a>Reference | 参考</h2><p><a href="https://discussion.fedoraproject.org/t/getting-snapper-btrfs-assistant-to-work-with-dnf5/133948/6">Getting snapper&#x2F;btrfs-assistant to work with dnf5</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Fedora</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ICPC: Mob Grinder</title>
    <link href="/posts/b3ee6a2b/"/>
    <url>/posts/b3ee6a2b/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p><a href="https://open.kattis.com/problems/mobgrinder">Link of Problem</a></p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>This is an interesting constructive problem.</p><h3 id="Step-1-Analysis-Illegal-Situation"><a href="#Step-1-Analysis-Illegal-Situation" class="headerlink" title="Step 1: Analysis Illegal Situation"></a>Step 1: Analysis Illegal Situation</h3><p>First we need to figure out in what kind of situation, it is an impossible task. Our target is to move all possible monsters on any position to the top-right corner. Obviously, the position takes most distance to move is the bottom-left corner. If we don’t have enough “Up” and “Right” belts to move monster on that position to the top-right corner, we cannot get legal solution. So if R &lt; M - 1 or U &lt; N - 1, print “impossible”</p><h3 id="Step-2-Get-the-Main-Path"><a href="#Step-2-Get-the-Main-Path" class="headerlink" title="Step 2: Get the Main Path"></a>Step 2: Get the Main Path</h3><p>Now we know, there must exist a path from bottom-left corner to top-right corner. And to simplify our construciton, we can assume this path only contains “Up” and “Right” because moving “Left” or “Down” is unnecessary and wasty. For 4*3 map, one of such example is like the following:</p><table><thead><tr><th align="center">_</th><th align="center">R</th><th align="center">*</th></tr></thead><tbody><tr><td align="center">_</td><td align="center">U</td><td align="center">_</td></tr><tr><td align="center">_</td><td align="center">U</td><td align="center">_</td></tr><tr><td align="center">R</td><td align="center">U</td><td align="center">_</td></tr></tbody></table><p>We consider this path as “main path”</p><h3 id="Step-3-Guide-to-Main-Path"><a href="#Step-3-Guide-to-Main-Path" class="headerlink" title="Step 3: Guide to Main Path"></a>Step 3: Guide to Main Path</h3><p>Now we have the “Main Path”. For positions main path covered we don’t need to worry about them. For the others, we need to try to move monsters generate on them to the main path. We can see the main path cut the whole graph into two halfs: top-left half and bottom-right half, we call it Zone1 and Zone2. </p><table><thead><tr><th align="center">1</th><th align="center">R</th><th align="center">*</th></tr></thead><tbody><tr><td align="center">1</td><td align="center">U</td><td align="center">2</td></tr><tr><td align="center">1</td><td align="center">U</td><td align="center">2</td></tr><tr><td align="center">R</td><td align="center">U</td><td align="center">2</td></tr></tbody></table><p>If we spend some time, we will find if we only put “Right” and “Down” in Zone1, no matter how we put it, monsters in Zone1 will eventually get on the main path and will not stuck in loop or move out of the graph. And this theorem works for Zone2 as well:</p><table><thead><tr><th align="center">R</th><th align="center">R</th><th align="center">*</th></tr></thead><tbody><tr><td align="center">D</td><td align="center">U</td><td align="center">U</td></tr><tr><td align="center">D</td><td align="center">U</td><td align="center">L</td></tr><tr><td align="center">R</td><td align="center">U</td><td align="center">L</td></tr></tbody></table><h3 id="Step-4-Generate-Solution"><a href="#Step-4-Generate-Solution" class="headerlink" title="Step 4: Generate Solution"></a>Step 4: Generate Solution</h3><p>Now we can easily generate the solution based on these properties:</p><ol><li>There must exist a path from bottom-left and top-right</li><li>Zone1 only contains “Right” and “Down”</li><li>Zone2 only contains “Left” and “Up”</li></ol><p>And here is the exact steps:</p><ol><li>Calculate the number of “R” “L” “D” “U” left after we build the main path</li><li>Put all “R” and “D” on the top-left part, and all “L” and “U” on the bottom-right part, and make sure Zone1 and Zone2 don’t touch each other</li><li>After we built Zone1 and Zone2, the grids still empty form the main path.</li></ol><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">_</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>.._readline_usize()[<span class="hljs-number">0</span>] &#123;<br>        <span class="hljs-keyword">let</span> [n, m, u, r, d, l] = _readline_usize().<span class="hljs-title function_ invoke__">try_into</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>        <span class="hljs-keyword">if</span> u &lt; n - <span class="hljs-number">1</span> || r &lt; m - <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;impossible\n&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">u</span> = u - (n - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">d</span> = d;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">l</span> = l;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">r</span> = r - (m - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">g</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-built_in">vec!</span>[<span class="hljs-string">&#x27;*&#x27;</span>; m]; n];<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..n - <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">for</span> <span class="hljs-variable">j</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..m - <span class="hljs-number">1</span> &#123;<br>                <span class="hljs-keyword">if</span> r &gt; <span class="hljs-number">0</span> &#123;<br>                    g[i][j] = <span class="hljs-string">&#x27;R&#x27;</span>;<br>                    r -= <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> d &gt; <span class="hljs-number">0</span> &#123;<br>                    g[i][j] = <span class="hljs-string">&#x27;D&#x27;</span>;<br>                    d -= <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>..n).<span class="hljs-title function_ invoke__">rev</span>() &#123;<br>            <span class="hljs-keyword">for</span> <span class="hljs-variable">j</span> <span class="hljs-keyword">in</span> (<span class="hljs-number">1</span>..m).<span class="hljs-title function_ invoke__">rev</span>() &#123;<br>                <span class="hljs-keyword">if</span> u &gt; <span class="hljs-number">0</span> &#123;<br>                    g[i][j] = <span class="hljs-string">&#x27;U&#x27;</span>;<br>                    u -= <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> l &gt; <span class="hljs-number">0</span> &#123;<br>                    g[i][j] = <span class="hljs-string">&#x27;L&#x27;</span>;<br>                    l -= <span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span> = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">y</span> = <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>;<br>        <span class="hljs-keyword">while</span> !(x == <span class="hljs-number">0</span> &amp;&amp; y == m - <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> x &gt; <span class="hljs-number">0</span> &amp;&amp; g[x - <span class="hljs-number">1</span>][y] == <span class="hljs-string">&#x27;*&#x27;</span> &#123;<br>                g[x][y] = <span class="hljs-string">&#x27;U&#x27;</span>;<br>                x -= <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> y &lt; m - <span class="hljs-number">1</span> &amp;&amp; g[x][y + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;*&#x27;</span> &#123;<br>                g[x][y] = <span class="hljs-string">&#x27;R&#x27;</span>;<br>                y += <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..n &#123;<br>            <span class="hljs-keyword">for</span> <span class="hljs-variable">j</span> <span class="hljs-keyword">in</span> <span class="hljs-number">0</span>..m &#123;<br>                <span class="hljs-built_in">print!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, g[i][j]);<br>            &#125;<br>            <span class="hljs-built_in">println!</span>();<br>        &#125;<br>        <span class="hljs-built_in">println!</span>();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">_readline_usize</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">usize</span>&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">input</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    std::io::<span class="hljs-title function_ invoke__">stdin</span>()<br>        .<span class="hljs-title function_ invoke__">read_line</span>(&amp;<span class="hljs-keyword">mut</span> input)<br>        .<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;Failed to get input&quot;</span>);<br>    input<br>        .<span class="hljs-title function_ invoke__">split_whitespace</span>()<br>        .<span class="hljs-title function_ invoke__">filter_map</span>(|word| word.<span class="hljs-title function_ invoke__">parse</span>().<span class="hljs-title function_ invoke__">ok</span>())<br>        .<span class="hljs-title function_ invoke__">collect</span>()<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Get Longest Common Subsequence (LCS) in O(NlogN)</title>
    <link href="/posts/e609e3dd/"/>
    <url>/posts/e609e3dd/</url>
    
    <content type="html"><![CDATA[<h2 id="Intro-Get-LCS-Longest-Common-Sunsequence-in-O-NM"><a href="#Intro-Get-LCS-Longest-Common-Sunsequence-in-O-NM" class="headerlink" title="Intro: Get LCS (Longest Common Sunsequence) in O(NM)"></a>Intro: Get LCS (Longest Common Sunsequence) in O(NM)</h2><p>Let me beriefly explain the common way to get LCS in textbook. Let <code>A</code> and <code>B</code> are strings, consider using dynamic programming, <code>dp[i][j]</code> represents LCS in <code>A[0..i]</code> and <code>B[0..j]</code>. Then we can get the following dp formula:</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Rust">dp[i][j] = <span class="hljs-keyword">if</span> A[i] == B[j] &#123;<br>    dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] + <span class="hljs-number">1</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">max</span>(dp[i - <span class="hljs-number">1</span>][j], dp[i][j - <span class="hljs-number">1</span>])<br>&#125;<br></code></pre></td></tr></table></figure><p>It takes O(NM) (where N, M are length of A and B) to get LCS. However, when N and M get to $10^5$, it is not acceptable in competitive programming.</p><h2 id="Prerequisite-Get-LIS-Longest-Increasing-Subsequence-in-O-NlogN"><a href="#Prerequisite-Get-LIS-Longest-Increasing-Subsequence-in-O-NlogN" class="headerlink" title="Prerequisite: Get LIS (Longest Increasing Subsequence) in O(NlogN)"></a>Prerequisite: Get LIS (Longest Increasing Subsequence) in O(NlogN)</h2><p>One more step before we get into the title. Because in the end we will transform LCS problems to LIS problems in a linear time t reach <code>O(NlogN)</code>, so I have to remind you of LIS in <code>O(NlogN)</code> before we really get started:</p><p>The key idea to get LIS in this way is Greedy: it maintains an ordered array <code>tails[]</code> which <code>tails[i]</code> represent <strong>the smallest end among ends of all the increasing subsequences with length i</strong> (array indexed by 1), like the following example:</p><p>A &#x3D; [5, 1, 3, 5, 1]</p><ul><li>A[1] &#x3D; 5, tails &#x3D; [5]</li><li>A[2] &#x3D; 1, tails &#x3D; [1]</li><li>A[3] &#x3D; 3, tails &#x3D; [1, 3]</li><li>A[4] &#x3D; 5, tails &#x3D; [1, 3, 5]</li><li>A[5] &#x3D; 1, tails &#x3D; [1, 3, 5]</li></ul><p>We can observe that <code>tails[]</code> is ordered because if <code>tails[i] &gt; tails[j]</code> with <code>i &lt; j</code>, then we can update <code>tails[i]</code> with <code>tails[j]</code>. Because we can get an increasing subsequence with length <code>i</code> end in <code>tails[j]</code> by remove the first <code>j - i</code> elements in the increasing subsequence with length <code>j</code> end in <code>tails[j]</code>, which causes a contradiction. </p><p>The exact steps we maintain <code>tails[]</code> during each iteration of <code>A[i]</code> is:</p><ul><li>Find the first element in <code>tails[]</code> which is larger than or equal to <code>A[i]</code> and replace it. </li><li>If <code>A[i]</code> is larger than all the elements in <code>tails[]</code>, push <code>A[i]</code> to the end of <code>tails[]</code>.</li></ul><p>After iterate all the elements, we can see the length of <code>tails[]</code> is the length of LIS.</p><p>And the time complexity of this algorithm is <code>O(NlogN)</code>, if we use binary search in the step of find the first element larger than <code>A[i]</code></p><h2 id="Key-LCS-LIS"><a href="#Key-LCS-LIS" class="headerlink" title="Key: LCS &lt;&#x3D;&gt; LIS"></a>Key: LCS &lt;&#x3D;&gt; LIS</h2><h3 id="Steps"><a href="#Steps" class="headerlink" title="Steps:"></a>Steps:</h3><p>Consider <code>A = [3, 9, 7, 10, 3]</code> and <code>B = [5, 3, 7, 3]</code>, we want to find the LCS between them.</p><ol><li>Build a <code>map[][]</code> to record indexs of every element in <code>A[i]</code>, like:</li></ol><ul><li>map[3] &#x3D; [1, 5]</li><li>map[9] &#x3D; [2]</li><li>map[7] &#x3D; [3]</li><li>map[10] &#x3D; [4]</li></ul><ol start="2"><li>Replace every elements in <code>B[]</code> with the index recorded in map with reverse order:</li></ol><ul><li>B[1] &#x3D; 5 -&gt; map[5] &#x3D; [] -&gt; []</li><li>B[2] &#x3D; 3 -&gt; map[3] &#x3D; [1, 5] -&gt; [5, 1]</li><li>B[3] &#x3D; 7 -&gt; map[7] &#x3D; [3] -&gt; [3]</li><li>B[4] &#x3D; 3 -&gt; map[3] &#x3D; [1, 5] -&gt; [5, 1]</li></ul><ol start="3"><li>Combine the indexs and form a new array called <code>C[]</code>:</li></ol><ul><li>C &#x3D; [5, 1, 3, 5, 1]</li></ul><ol start="4"><li>Calculate the length of LIS in <code>C[]</code>, which is equal to the length of LCS of <code>A[]</code> and <code>B[]</code></li></ol><h3 id="Prove-1-LCS-LIS"><a href="#Prove-1-LCS-LIS" class="headerlink" title="Prove 1: LCS -&gt; LIS"></a>Prove 1: LCS -&gt; LIS</h3><p>Assume one of the longest LCS among <code>A[]</code> and <code>B[]</code> is <code>S[]</code>, then <code>S[]</code> satisfy the following properties:</p><ol><li>All elements in <code>S[]</code> appear in both <code>A[]</code> and <code>B[]</code></li><li>The relative order in <code>S[]</code> is same with both <code>A[]</code> and <code>B[]</code></li></ol><p>And because of these properties, if we map all <code>S[]</code> elements on <code>C[]</code>, it is an increasing subsequence with the same length.</p><h3 id="Prove-2-LIS-LCS"><a href="#Prove-2-LIS-LCS" class="headerlink" title="Prove 2: LIS -&gt; LCS"></a>Prove 2: LIS -&gt; LCS</h3><p>Assume one of the longest LIS in <code>C[]</code> is <code>S&#39;[]</code>, then <code>S&#39;[]</code> satisfy the following properties:</p><ol><li>The map of <code>S&#39;[]</code> in <code>A[]</code> is a subsequence of <code>A[]</code>, because the value of each element <code>S&#39;[]</code> is increasing and unique, so one element in <code>S&#39;[]</code> match exactly one element in <code>A[]</code> with increasing index.</li><li>The map of <code>S&#39;[]</code> in <code>B[]</code> is a subsequence of <code>B[]</code>, because each element in <code>B[]</code> match a list of its index in <code>A[]</code> with decreasing order in <code>C[]</code>, but <code>S&#39;[]</code> elements’ value is increasing, so it’s impossible that two different elements in <code>S&#39;[]</code> match to the same element in <code>B[]</code>. In the other word, one element in <code>S&#39;[]</code> match exactly one element in <code>B[]</code> with increasing index.</li></ol><p>So for each LIS in <code>C[]</code>, we can find a common subsequence with the same length in both <code>A[]</code> and <code>B[]</code>.</p><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Based on the prove of both directions, we can conclude all LCS problems can transform to the matched LIS problem without bias. And because LIS can be obtained in O(NlogN), in most cases we can get an improvement in time complexity.</p><h2 id="In-The-End-WARNING-Worst-Case-Scenario-and-When-we-should-use-it"><a href="#In-The-End-WARNING-Worst-Case-Scenario-and-When-we-should-use-it" class="headerlink" title="In The End: WARNING: Worst Case Scenario and When we should use it?"></a>In The End: WARNING: Worst Case Scenario and When we should use it?</h2><p>It is obvious that the performance of this algorithm is highly relate to the length of transformed array <code>C[]</code>, which we define as <code>N</code>. And if we define length of <code>A</code>, <code>B</code> are <code>P</code>, <code>Q</code>. Can we build a test case to make this algorithm even slower than the original way with <code>O(PQ)</code>?</p><p>Definitely we can, consider the following <code>A</code> and <code>B</code>:</p><p>A &#x3D; [1, 1, 1, 1, 1]<br>B &#x3D; [1, 1, 1, 1, 1]</p><p>And by the previous steps, we can get <code>C</code>:</p><p>C &#x3D; [5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1, 5, 4, 3, 2, 1]</p><p>We can see in this worst case, length of <code>C</code> reaches <code>P</code> * <code>Q</code> and the total time complexity of algorithnm reaches <code>O(PQlog(PQ))</code> which is worse than the DP one. This tell us the algorithm may not get an improvement when there are a lot of repeated elements in <code>A[]</code> and <code>B[]</code>. Be careful about this point when considering your test cases.</p><h2 id="Try-It"><a href="#Try-It" class="headerlink" title="Try It"></a>Try It</h2><p><a href="https://open.kattis.com/problems/doubledeck">Sample Problem on Kattis</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How to render 3D to 2D pixel art in Godot</title>
    <link href="/posts/a9781501/"/>
    <url>/posts/a9781501/</url>
    
    <content type="html"><![CDATA[<h2 id="What-is-3D-to-2D-Rendering"><a href="#What-is-3D-to-2D-Rendering" class="headerlink" title="What is 3D to 2D Rendering?"></a>What is 3D to 2D Rendering?</h2><p>3D to 2D rendering is the process of automatically converting three-dimensional models into two-dimensional images using a computer. It’s a fundamental technique in computer graphics that allows artists and developers to leverage the flexibility of 3D modeling for creating traditional 2D art.</p><h2 id="Why-Use-3D-to-2D-Rendering"><a href="#Why-Use-3D-to-2D-Rendering" class="headerlink" title="Why Use 3D to 2D Rendering?"></a>Why Use 3D to 2D Rendering?</h2><p>The primary advantage of this method lies in its efficiency and scalability, especially for character animation. Consider a game like <em>Dead Cells</em>, which features detailed, fluid pixel art animations. </p><p><img src="https://github.com/user-attachments/assets/b96bf188-603b-42e7-8853-23c270cb09e9"></p><p><img src="https://github.com/user-attachments/assets/51719172-1810-49bd-a07c-ea344f2cd852"></p><p>Creating these animations directly by hand is an incredibly labor-intensive process. A single second of motion might require a dozen or more individual frames, meaning hundreds or even thousands of unique images are needed to animate just one character. This workload increases exponentially with more characters, weapons, or actions.</p><p>A more efficient approach is to build a single 3D model of the character. Once the model is complete, animators can apply motions and animations to it in a 3D environment. The software then automatically renders these animated 3D sequences into 2D images or sprite sheets. This technique, which Dead Cells uses, significantly reduces the manual workload, allowing for a much higher volume of high-quality, fluid animations with a fraction of the effort required for traditional frame-by-frame drawing. It offers the best of both worlds: the visual style of 2D art with the production efficiency of 3D technology.</p><h2 id="How-to-Implement-3D-to-2D-Rendering-in-Godot"><a href="#How-to-Implement-3D-to-2D-Rendering-in-Godot" class="headerlink" title="How to Implement 3D to 2D Rendering in Godot"></a>How to Implement 3D to 2D Rendering in Godot</h2><ul><li><h3 id="Arrange-a-3d-scene-and-model-as-you-like"><a href="#Arrange-a-3d-scene-and-model-as-you-like" class="headerlink" title="Arrange a 3d scene and model as you like"></a>Arrange a 3d scene and model as you like</h3><ul><li><p><img src="https://github.com/user-attachments/assets/52a35dbb-d3f8-4793-9d92-9d7810c208df"> </p><p>First, put your 3d model in a separate scene and setup everything you need to display the model (like reflection, animator, light and so on). </p><p>P.S.: If you want your item looks better after rendering to 2d, you can choose the “Diffusion Mode” and “Specular Mode” as “Toon”, which is the godot inherit shading method compatiable with 3D to 2D rendering</p><p><img src="https://github.com/user-attachments/assets/8b31bf2b-15ea-4805-abd1-fb29562402b9"></p></li></ul></li><li><h3 id="Add-SubViewPort-Node-in-3D-Scene"><a href="#Add-SubViewPort-Node-in-3D-Scene" class="headerlink" title="Add SubViewPort Node in 3D Scene"></a>Add SubViewPort Node in 3D Scene</h3><ul><li><p><img src="https://github.com/user-attachments/assets/5e0d0ea8-9066-4dae-8a08-13f4b8063557"></p><p>Create a SubViewPoint Node and Put all the 3D-related nodes under the SubViewPoint node.</p><p><img src="https://github.com/user-attachments/assets/d7468004-e558-4dbf-b453-cb2bdaf0d476"></p><p>Then create a Sprite2D node under root, choose “NewViewPoint Texture” in texture feature in this node and select the SubViewPoint we just created.</p><p>Now we can see the view of camera in 3D is projected on the 2D scene like the following:</p><p><img src="https://github.com/user-attachments/assets/86361bd3-a71d-4f7f-accf-39ddc327d03c"></p><p>P.S.: Remember to select “Transparent BG” in SubViewPoint Node if you don’t want to see the background in 3D view.</p></li></ul></li><li><h3 id="Create-a-shader-for-2D-sprite-image"><a href="#Create-a-shader-for-2D-sprite-image" class="headerlink" title="Create a shader for 2D sprite image"></a>Create a shader for 2D sprite image</h3><ul><li><p><img src="https://github.com/user-attachments/assets/e55023d4-bd70-4f42-a30c-3a306e70423d"></p><p>In the material of Sprite2D node, we choose to create new metariel and new shader for this image.</p><p>After creation, we can see the shader editor and initial shader code at the bottom of screen like this:</p><p><img src="https://github.com/user-attachments/assets/a0e1c91f-572f-49bc-bb0a-a49462016ce4"></p><p>Now we start to code the shader, first we create 3 uniform global values:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gdshader">uniform vec2 pixel_count = vec2(64);  // Number of pixel after rendering the image<br>uniform float outline_width = 1.0;<br>uniform vec4 outline_color : source_color = vec4(0,0,0,1);<br></code></pre></td></tr></table></figure><p>Then we add the following two functions:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs gdshader">vec2 pixelate(vec2 uv, vec2 count) &#123;  // return uv<br>    uv *= count;<br>    uv = floor(uv);<br>    uv /= count;<br>    return uv;<br>&#125;<br></code></pre></td></tr></table></figure><p>This function is intended to pixelate the image</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gdshader">vec4 add_outline(vec2 uv, vec4 color, sampler2D obj_texture, vec2 obj_pixel_size) &#123;  // return color<br>  vec4 outline =  texture(obj_texture, uv + vec2(0, obj_pixel_size.y) * outline_width) +<br>          texture(obj_texture, uv + vec2(0, -obj_pixel_size.y) * outline_width) +<br>          texture(obj_texture, uv + vec2(obj_pixel_size.x, 0) * outline_width) +<br>          texture(obj_texture, uv + vec2(-obj_pixel_size.x, 0) * outline_width) +<br>          texture(obj_texture, uv + vec2(obj_pixel_size.x, obj_pixel_size.y) * outline_width * (sqrt(2) / 2.0)) +<br>          texture(obj_texture, uv + vec2(obj_pixel_size.x, -obj_pixel_size.y) * outline_width * (sqrt(2) / 2.0)) +<br>          texture(obj_texture, uv + vec2(-obj_pixel_size.x, obj_pixel_size.y) * outline_width * (sqrt(2) / 2.0)) +<br>          texture(obj_texture, uv + vec2(-obj_pixel_size.x, -obj_pixel_size.y) * outline_width * (sqrt(2) / 2.0));<br>  outline.rgb = color.rgb;<br>  outline.a = min(outline.a, 1);<br>  vec4 origin = texture(obj_texture, uv);<br>  return mix(outline, origin, origin.a);<br>&#125;<br></code></pre></td></tr></table></figure><p>This function is intended to add a border for the object.</p><p>Finally, we adding the following line to the fragment function:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gdshader">void fragment() &#123;<br>  // Called for every pixel the material is visible on.<br>  COLOR = add_outline(pixelate(UV, pixel_count), outline_color, TEXTURE, TEXTURE_PIXEL_SIZE);<br>&#125;<br></code></pre></td></tr></table></figure><p>Now save the code and we can see our picture in 2D scene changed to this:</p><p><img src="https://github.com/user-attachments/assets/bd352c4b-d8d3-4b50-a0ab-8896f0ba1116"></p></li></ul></li><li><h3 id="Link-it-to-the-main-scene"><a href="#Link-it-to-the-main-scene" class="headerlink" title="Link it to the main scene"></a>Link it to the main scene</h3><ul><li><p>Go to the main scene of your project and link the object into the main scene, add a simple background for it, now we sucessfully convert our 3D model to 2D pixel image:</p><p><img src="https://github.com/user-attachments/assets/58744a30-6c91-474e-9928-7d73af0f55fe"></p><p>If we add an animation to the 3D object, the 2D picture will move as well:</p><p><img src="https://github.com/user-attachments/assets/e2dd1d91-8037-4cca-b20b-b5ffc41f113f"></p></li></ul></li></ul><h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Here are all the steps for basic 3D model to 2D pixel image rendering. You can explore by yourself for more features like adding HDR, setting the fps of pixel animation, create better outline to represent shadow and so on. </p>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
      <tag>Godot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How to manage email like an Advanced-Linux-User</title>
    <link href="/posts/93ebbc6b/"/>
    <url>/posts/93ebbc6b/</url>
    
    <content type="html"><![CDATA[<h2 id="Introduction-Why"><a href="#Introduction-Why" class="headerlink" title="Introduction: Why?"></a>Introduction: Why?</h2><p>It seems you’re describing a world many of us can only dream of – one free from the daily deluge of digital communication. Imagine the luxury of a life unburdened by countless logins, where “inbox zero” isn’t a mythical achievement but the natural state of being.</p><p>For the rest of us, however, reality is a relentless stream of notifications. We navigate a labyrinth of web pages, each demanding our attention, or wrestle with email clients like Outlook and Thunderbird – digital behemoths brimming with features we’ll never touch, yet somehow managing to monopolize half our screens. Lucky indeed are those who escape this modern-day communication treadmill.</p><p>But luckily, you are a linux user! Minimalism and Unix Philosophy are your weapons. Now pick them up and see how deep the rabbit hole can be.</p><h2 id="Aerc-Unix-Philosophy-Driven-Email-Client"><a href="#Aerc-Unix-Philosophy-Driven-Email-Client" class="headerlink" title="Aerc: Unix-Philosophy Driven Email Client"></a>Aerc: Unix-Philosophy Driven Email Client</h2><p><img src="/posts/93ebbc6b/1.png"></p><ol><li>No dependency on GUI</li><li>No messy folder management</li><li>No any other unnecessary and uncompatible features</li><li>Elegent Plain Text Workflow</li></ol><h3 id="How-to-setup-Aerc-Based-on-Ubuntu-24-04-LTS-Server"><a href="#How-to-setup-Aerc-Based-on-Ubuntu-24-04-LTS-Server" class="headerlink" title="How to setup Aerc? (Based on Ubuntu 24.04 LTS Server)"></a>How to setup Aerc? (Based on Ubuntu 24.04 LTS Server)</h3><ol><li>Install aerc:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">sudo</span> apt update &amp;&amp; apt install aerc<br></code></pre></td></tr></table></figure><ol><li>Start to configure:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">aerc<br></code></pre></td></tr></table></figure><p><img src="/posts/93ebbc6b/2.png"></p><p>Input your account information sequantially. And press <code>Next</code> to the next step.</p><p><img src="/posts/93ebbc6b/3.png"></p><p>Here I setup my google account. Input your email address in <code>Username</code>. About <code>Password</code>, if you are using Personal Google Account or other personal email service (like posteo I used), you can create an APP PASSWORD for Aerc. </p><p>For those who use School Email or Company Email, or just don’t want to use app password because they are not safe, I will introduce how to set it up later with a different tool.</p><p>Leave everything else as default, press <code>Next</code> and do the almost same setup for outgoing mail.</p><p>Then you are done with the basic setup.</p><p>You can change your setting with the following command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.config/aerc/account.conf<br></code></pre></td></tr></table></figure><h2 id="Oama-Local-Oauth2-Authenticator"><a href="#Oama-Local-Oauth2-Authenticator" class="headerlink" title="Oama: Local Oauth2 Authenticator"></a>Oama: Local Oauth2 Authenticator</h2><p>You might notice that with the previous way to setup, most of school &#x2F; company email services cannot be used because they enforce Oauth2 authentication. Though aerc support to use OAuth2 token, it cannot send a requet to get it by itself. </p><p>So here comes Oama, a local Oauth2 Authenticator written in Haskell. It can dynamically fetch the token from your Google account and store it locally.</p><h3 id="Setup-Oama-and-Aerc"><a href="#Setup-Oama-and-Aerc" class="headerlink" title="Setup Oama and Aerc"></a>Setup Oama and Aerc</h3><ol><li>Install Oama:</li></ol><p>Cause most Linux distributions do not have Oama in their official repo, you need to install its binary manually.</p><p><a href="https://github.com/pdobsan/oama/releases">Oama Github Link</a></p><p>Fetch the newest version of Oama and extract it. And add the binary file to the System PATH.</p><ol start="2"><li>Get Oauth2 Token:</li></ol><p>Run Oama:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ oama<br>WARNING -- Could not find config file: /home/&lt;USERNAME&gt;/.config/oama/config.yaml<br>Creating initial config file ...<br>... <span class="hljs-keyword">done</span>.<br>Edit it <span class="hljs-keyword">then</span> start oama again.<br></code></pre></td></tr></table></figure><p>Open config file:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim ~/.config/oama/config.yaml<br></code></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">## oama version 0.21.0</span><br><span class="hljs-comment">## This is a YAML configuration file, indentation matters.</span><br><span class="hljs-comment">## Double ## indicates comments while single # default values.</span><br><span class="hljs-comment">## Not all defaults are shown, for full list run `oama printenv`</span><br><span class="hljs-comment">## and look at the `services:` section.</span><br><br><span class="hljs-comment">## Possible options for keeping refresh and access tokens:</span><br><span class="hljs-comment">## GPG - in a gpg encrypted file $XDG_STATE_HOME/oama/&lt;email-address&gt;.oauth</span><br><span class="hljs-comment">##       (XDG_STATE_HOME defaults to ~/.local/state)</span><br><span class="hljs-comment">## GPG - in a gpg encrypted file ~/.local/state/oama/&lt;email-address&gt;.oauth</span><br><span class="hljs-comment">## KEYRING - in the keyring of a password manager with Secret Service API</span><br><span class="hljs-comment">##</span><br><span class="hljs-comment">## Choose exactly one.</span><br><br><span class="hljs-attr">encryption:</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-string">KEYRING</span><br><br><span class="hljs-comment"># encryption:</span><br><span class="hljs-comment">#   tag: GPG</span><br><span class="hljs-comment">#   contents: your-KEY-ID</span><br><br><span class="hljs-comment">## Builtin service providers</span><br><span class="hljs-comment">## - google</span><br><span class="hljs-comment">## - microsoft</span><br><span class="hljs-comment">## Required fields: client_id, client_secret</span><br><span class="hljs-comment">##</span><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">google:</span><br>    <span class="hljs-attr">client_id:</span> <span class="hljs-string">application-CLIENT-ID</span><br>    <span class="hljs-attr">client_secret:</span> <span class="hljs-string">application-CLIENT-SECRET</span><br>  <span class="hljs-comment">## Alternatively get them from a password manager using a shell command.</span><br>  <span class="hljs-comment">## If both variants are present then the _cmd versions get the priority.</span><br>  <span class="hljs-comment">## For example:</span><br>  <span class="hljs-comment"># client_id_cmd: |</span><br>  <span class="hljs-comment">#   pass email/my-app | head -1</span><br>  <span class="hljs-comment"># client_secret_cmd: |</span><br>  <span class="hljs-comment">#   pass email/my-app | head -2 | tail -1</span><br>  <span class="hljs-comment">#  auth_scope: https://mail.google.com/</span><br><br>  <span class="hljs-attr">microsoft:</span><br>     <span class="hljs-attr">client_id:</span> <span class="hljs-string">application-CLIENT-ID</span><br>  <span class="hljs-comment">## client_secret is not needed for device code flow</span><br>  <span class="hljs-comment">#  auth_endpoint: https://login.microsoftonline.com/common/oauth2/v2.0/devicecode</span><br>  <span class="hljs-comment">##</span><br>  <span class="hljs-comment">## client_secret might be needed for other authorization flows</span><br>  <span class="hljs-comment">#  client_secret: application-CLIENT_SECRET</span><br>  <span class="hljs-comment">## auth_endpoint: https://login.microsoftonline.com/common/oauth2/v2.0/authorize</span><br>  <span class="hljs-comment">#</span><br>  <span class="hljs-comment">#  auth_scope: https://outlook.office.com/IMAP.AccessAsUser.All</span><br>  <span class="hljs-comment">#     https://outlook.office.com/SMTP.Send</span><br>  <span class="hljs-comment">#     offline_access</span><br>  <span class="hljs-comment">#  tenant: common</span><br><br>  <span class="hljs-comment">## User configured providers</span><br>  <span class="hljs-comment">## Required fields: client_id, client_secret, auth_endpoint, auth_scope, token_endpoint</span><br>  <span class="hljs-comment">##</span><br>  <span class="hljs-comment">## For example:</span><br>  <span class="hljs-comment"># yahoo:</span><br>  <span class="hljs-comment">#   client_id: application-CLIENT-ID</span><br>  <span class="hljs-comment">#   client_id_cmd: |</span><br>  <span class="hljs-comment">#     password manager command ...</span><br>  <span class="hljs-comment">#   client_secret: application-CLIENT_SECRET</span><br>  <span class="hljs-comment">#   client_secret_cmd: |</span><br>  <span class="hljs-comment">#     password manager command ...</span><br>  <span class="hljs-comment">#   auth_endpoint: EDIT-ME!</span><br>  <span class="hljs-comment">#   auth_scope: EDIT-ME!</span><br>  <span class="hljs-comment">#   token_endpoint: EDIT-ME!</span><br></code></pre></td></tr></table></figure><p>Here we don’t need to care about the other parts, only change <code>client_id</code> with <code>9e5f94bc-e8a4-4e73-b8be-63364c29d753</code>. This is ID of Thunderbird. You can also change <code>tag</code><br>setting to use GPG encryption like this: </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">encryption:</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-string">GPG</span><br>    <span class="hljs-attr">contents:</span> <span class="hljs-string">&lt;Your-GPG-key-id&gt;</span><br></code></pre></td></tr></table></figure><p>After change these settings, goes back to terminal and run:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ oama authorize microsoft &lt;your-email-addr&gt; --device<br>Visit:<br>https://microsoft.com/devicelogin<br><br>and enter the code:<br>XXXXXXXXXXXX<br></code></pre></td></tr></table></figure><p>Follow the webpage guidence to finish the setup on oama. Finally we open Aerc config file and setup the email account:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim ~/.config/aerc/accounts.conf<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs config">[&lt;Name of Email Account&gt;]<br>source            = imaps+xoauth2://&lt;Your-Email-Addr&gt;@&lt;IMAP-Addr&gt;<br>source-cred-cmd   = &quot;oama access &lt;Your-Email-Addr&gt;&quot;<br>outgoing          = smtp+xoauth2://&lt;Your-Email-Addr&gt;@&lt;SMTP-Addr&gt;<br>outgoing-cred-cmd = &quot;oama access &lt;Your-Email-Addr&gt;&quot;<br>default           = INBOX<br>cache-headers     = true<br>from              = &quot;&lt;Your-Name&gt;&quot; &lt;Your-Email-Addr&gt;<br>check-mail        = 1m # this refreshes the email every 1 minutes<br>folders           = INBOX, Sent, Archive, Trash<br></code></pre></td></tr></table></figure><p>Save and close the file. Now run Aerc and manage your emails like an advanced Linuxuser. Enjoy! 🚀</p>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Coding Test: Find the Largest Stable Number | 笔试： 寻找最大的稳定数</title>
    <link href="/posts/49b62a13/"/>
    <url>/posts/49b62a13/</url>
    
    <content type="html"><![CDATA[<!-- @format --><h2 id="Problem-题面"><a href="#Problem-题面" class="headerlink" title="Problem 题面"></a>Problem 题面</h2><p>Give a number $N$, find the largest number $k$ satisfy the following requirements smaller than $N$:</p><ol><li>Sum of all digits of $k$ is prime</li><li>Each digits of $k$ is larger than or equals to the previous digit (e.g. 123456, 111111)</li></ol><p>给定一个上限$N$, 寻找最大的小于$N$的数字$k$，要求满足以下条件：</p><ol><li>$k$的各个数位之和是素数</li><li>$k$的每一位都比前一位大 (比如 123455, 11111)</li></ol><h3 id="Input-输入"><a href="#Input-输入" class="headerlink" title="Input 输入"></a>Input 输入</h3><p>One line with one number $N$</p><p>一行，一个数字$N$</p><h3 id="Output-输出"><a href="#Output-输出" class="headerlink" title="Output 输出"></a>Output 输出</h3><p>One line with one number $k$ satisfy the requirements or $-1$ if there is no solution</p><p>一行，一个满足条件的数字$k$，如果没有符合条件的答案输出$-1$</p><h3 id="Size-and-Limits-数据规模和限制"><a href="#Size-and-Limits-数据规模和限制" class="headerlink" title="Size and Limits 数据规模和限制"></a>Size and Limits 数据规模和限制</h3><p>$N \leq 10^{18}$</p><p>Time Limits 时间限制: 200ms</p><h2 id="Solution-题解"><a href="#Solution-题解" class="headerlink" title="Solution 题解"></a>Solution 题解</h2><p>Obviously, the simplest approach is to try each number from $N$ down to $1$; if it satisfies the condition, return it, otherwise return $-1$. However, given the data scale up to $10^{18}$, this approach will definitely time out. By observing that the number of satisfying numbers is much smaller than the total range, we use a reverse thinking: generate numbers that meet the conditions via a search algorithm.</p><p>显然，最简单的做法就是从$N$到$1$一个个试过去，找到了就返回答案，没找到就返回$-1$。但考虑到$10^{18}$的数据规模，这个做法一定会超时。通过观察可以简单得到，满足条件的数的规模远小于上限内所有数的规模，所以采取逆向思维，从条件入手用搜索算法生成满足条件的数字。</p><p>First list all possible primes via the sieve method</p><p>首先，通过筛法列出所有可能的素数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>().strip())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">primes</span>(<span class="hljs-params">n</span>):<br>    sieve = [<span class="hljs-literal">True</span>] * (n + <span class="hljs-number">1</span>)<br>    sieve[<span class="hljs-number">0</span>] = sieve[<span class="hljs-number">1</span>] = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(math.sqrt(n)) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> sieve[i]:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i * i, n + <span class="hljs-number">1</span>, i):<br>                sieve[j] = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> sieve[i]]<br><br>primes_list = primes(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(num)) * <span class="hljs-number">9</span> + <span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure><p>For each prime, find the largest number with non-decreasing digits and digit-sum equal to that prime</p><p>然后，对于每一个素数，我们要找到最大的满足条件2且和为当前这个素数的数字。然后再这些数字里面找到最大的值进行返回</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python">ans = -<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> primes_list:<br>    digits = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(num)))]<br>    upper_limit = [<span class="hljs-built_in">int</span>(d) <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(num)]<br>    left = p<br>    res = largest_stable_number(<span class="hljs-number">0</span>, digits, left, upper_limit)<br>    <span class="hljs-keyword">if</span> res != -<span class="hljs-number">1</span>:<br>        ans = <span class="hljs-built_in">max</span>(ans, res)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><p>Implement the DFS function to build the largest valid number</p><ol><li>Convert the number to a digit array for easy generation.</li><li>If the sum of digits so far exceeds the target prime, prune this branch.</li><li>If all digits are assigned and the remaining sum is zero, return the constructed number.</li><li>Generate digits from most significant to least significant, iterating from the maximum allowable digit down to the minimum to ensure the first found solution is the largest.</li><li>Determine the upper bound for the current digit: if all previous digits match the corresponding digits of $N$, the upper bound is that digit of N; otherwise it is $9$.</li><li>Determine the lower bound for the current digit: it must be at least the previous digit to maintain non-decreasing order (or $0$ if it’s the first digit).</li><li>For the current position, try all digits in [lower_bound, upper_bound] in descending order; if a recursive call returns a valid number, return it immediately.</li><li>If no digit works, return -1.</li></ol><p>最后，我们来具体实现对于每一个素数，找到最大的满足条件的数字的dfs函数：</p><ol><li>首先把数字转化为对应的数位数组，方便生成数字。</li><li>如果当前数位数组之和已经超过指定的素数，说明当前的dfs方向已经不存在解，退回到上一层。</li><li>如果已经完成了所有位的生成，且和刚好等于指定的素数，那么则找到答案并返回解。</li><li>从高位到低位一位位生成，对于每一位，从范围内最大的数字往范围内最小的数字遍历，保证找到的第一个结果就是最大的结果。</li><li>判断当前位数字的上界：如果之前所有位的数字都等于$N$的对应位，那么如果当前位大于了$N$的对应位，就会超过范围，所以这种情况下上限为$N$的对应位的数字；如果之前已经有某一位的数字小于$N$的对应位，那么无论当前位的数字大小是多少，该数字都不可能超过范围，所以上限为单个位的最大值$9$。</li><li>判断当前位数字的下界：题目要求当前位大于等于前一位，所以下界就是前一位的数字。</li><li>对于当前位从大到小遍历范围内所有值，如果找到答案直接返回值退出。</li><li>如果没有找到解，返回-1</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">largest_stable_number</span>(<span class="hljs-params">cur: <span class="hljs-built_in">int</span>, digits, left: <span class="hljs-built_in">int</span>, upper_limit</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">if</span> left &lt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> cur == <span class="hljs-built_in">len</span>(digits):<br>        <span class="hljs-keyword">if</span> left != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, digits)))<br>    with_limit = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cur):<br>        <span class="hljs-keyword">if</span> digits[i] &lt; upper_limit[i]:<br>            with_limit = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br>    top = upper_limit[cur] <span class="hljs-keyword">if</span> with_limit <span class="hljs-keyword">else</span> <span class="hljs-number">9</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top, (<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> cur == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> digits[cur - <span class="hljs-number">1</span>])-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        digits[cur] = i<br>        res = largest_stable_number(cur + <span class="hljs-number">1</span>, digits, left - i, upper_limit)<br>        <span class="hljs-keyword">if</span> res != -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><h2 id="Code-完整代码"><a href="#Code-完整代码" class="headerlink" title="Code 完整代码"></a>Code 完整代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> math<br><br>num = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>().strip())<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">primes</span>(<span class="hljs-params">n</span>):<br>    sieve = [<span class="hljs-literal">True</span>] * (n + <span class="hljs-number">1</span>)<br>    sieve[<span class="hljs-number">0</span>] = sieve[<span class="hljs-number">1</span>] = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-built_in">int</span>(math.sqrt(n)) + <span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> sieve[i]:<br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(i * i, n + <span class="hljs-number">1</span>, i):<br>                sieve[j] = <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> [i <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n + <span class="hljs-number">1</span>) <span class="hljs-keyword">if</span> sieve[i]]<br><br>primes_list = primes(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(num)) * <span class="hljs-number">9</span> + <span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">largest_stable_number</span>(<span class="hljs-params">cur: <span class="hljs-built_in">int</span>, digits, left: <span class="hljs-built_in">int</span>, upper_limit</span>) -&gt; <span class="hljs-built_in">int</span>:<br>    <span class="hljs-keyword">if</span> left &lt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> cur == <span class="hljs-built_in">len</span>(digits):<br>        <span class="hljs-keyword">if</span> left != <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">int</span>(<span class="hljs-string">&#x27;&#x27;</span>.join(<span class="hljs-built_in">map</span>(<span class="hljs-built_in">str</span>, digits)))<br>    with_limit = <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cur):<br>        <span class="hljs-keyword">if</span> digits[i] &lt; upper_limit[i]:<br>            with_limit = <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">break</span><br>    top = upper_limit[cur] <span class="hljs-keyword">if</span> with_limit <span class="hljs-keyword">else</span> <span class="hljs-number">9</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(top, (<span class="hljs-number">0</span> <span class="hljs-keyword">if</span> cur == <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> digits[cur - <span class="hljs-number">1</span>])-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>):<br>        digits[cur] = i<br>        res = largest_stable_number(cur + <span class="hljs-number">1</span>, digits, left - i, upper_limit)<br>        <span class="hljs-keyword">if</span> res != -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> res<br>    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br><br>ans = -<span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> p <span class="hljs-keyword">in</span> primes_list:<br>    digits = [<span class="hljs-number">0</span> <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(<span class="hljs-built_in">str</span>(num)))]<br>    upper_limit = [<span class="hljs-built_in">int</span>(d) <span class="hljs-keyword">for</span> d <span class="hljs-keyword">in</span> <span class="hljs-built_in">str</span>(num)]<br>    left = p<br>    res = largest_stable_number(<span class="hljs-number">0</span>, digits, left, upper_limit)<br>    <span class="hljs-keyword">if</span> res != -<span class="hljs-number">1</span>:<br>        ans = <span class="hljs-built_in">max</span>(ans, res)<br><span class="hljs-built_in">print</span>(ans)<br></code></pre></td></tr></table></figure><p>And for Rust Lovers, here is the Rust version of code:</p><p>对于像我一样的Rust爱好者来说，下面是Rust的版本：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">n</span> = <span class="hljs-title function_ invoke__">read_i64</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num_digits</span> = n.<span class="hljs-title function_ invoke__">abs</span>().<span class="hljs-title function_ invoke__">to_string</span>().<span class="hljs-title function_ invoke__">len</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">primes</span> = <span class="hljs-title function_ invoke__">primes</span>(num_digits <span class="hljs-keyword">as</span> <span class="hljs-type">i64</span> * <span class="hljs-number">9</span>);<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">ans</span> = -<span class="hljs-number">1</span> <span class="hljs-keyword">as</span> <span class="hljs-type">i64</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">limit</span> = n<br>        .<span class="hljs-title function_ invoke__">abs</span>()<br>        .<span class="hljs-title function_ invoke__">to_string</span>()<br>        .<span class="hljs-title function_ invoke__">chars</span>()<br>        .<span class="hljs-title function_ invoke__">map</span>(|c| c.<span class="hljs-title function_ invoke__">to_digit</span>(<span class="hljs-number">10</span>).<span class="hljs-title function_ invoke__">unwrap</span>() <span class="hljs-keyword">as</span> <span class="hljs-type">i32</span>)<br>        .<span class="hljs-title function_ invoke__">collect</span>();<br>    <span class="hljs-keyword">for</span> &amp;prime <span class="hljs-keyword">in</span> primes.<span class="hljs-title function_ invoke__">iter</span>() &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = <span class="hljs-title function_ invoke__">largest_stable_number</span>(<span class="hljs-number">0</span>, &amp;<span class="hljs-keyword">mut</span> <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0</span>; num_digits], &amp;limit, prime, <span class="hljs-literal">true</span>);<br>        ans = ans.<span class="hljs-title function_ invoke__">max</span>(result);<br>    &#125;<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, ans);<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">read_i64</span>() <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i64</span> &#123;<br>    <span class="hljs-keyword">use</span> std::io::&#123;<span class="hljs-keyword">self</span>, Read, Write&#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">number</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    io::<span class="hljs-title function_ invoke__">stdout</span>().<span class="hljs-title function_ invoke__">flush</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">stdin</span> = io::<span class="hljs-title function_ invoke__">stdin</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">buffer</span> = [<span class="hljs-number">0</span>; <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">started</span> = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(()) = stdin.<span class="hljs-title function_ invoke__">read_exact</span>(buffer.<span class="hljs-title function_ invoke__">as_mut</span>()) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">c</span> = buffer[<span class="hljs-number">0</span>] <span class="hljs-keyword">as</span> <span class="hljs-type">char</span>;<br>        <span class="hljs-keyword">if</span> !started &#123;<br>            <span class="hljs-keyword">if</span> c == <span class="hljs-string">&#x27;-&#x27;</span> || c.<span class="hljs-title function_ invoke__">is_numeric</span>() &#123;<br>                started = <span class="hljs-literal">true</span>;<br>                number.<span class="hljs-title function_ invoke__">push</span>(c);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> c.<span class="hljs-title function_ invoke__">is_numeric</span>() &#123;<br>                number.<span class="hljs-title function_ invoke__">push</span>(c);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>    number.parse::&lt;<span class="hljs-type">i64</span>&gt;().<span class="hljs-title function_ invoke__">unwrap_or</span>(<span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">primes</span>(upper_limit: <span class="hljs-type">i64</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i64</span>&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">sieve</span> = <span class="hljs-built_in">vec!</span>[<span class="hljs-literal">true</span>; (upper_limit + <span class="hljs-number">1</span>) <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>];<br>    sieve[<span class="hljs-number">0</span>] = <span class="hljs-literal">false</span>;<br>    sieve[<span class="hljs-number">1</span>] = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> <span class="hljs-number">2</span>..=((upper_limit <span class="hljs-keyword">as</span> <span class="hljs-type">f64</span>).<span class="hljs-title function_ invoke__">sqrt</span>() <span class="hljs-keyword">as</span> <span class="hljs-type">i64</span>) &#123;<br>        <span class="hljs-keyword">if</span> !sieve[i <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>] &#123;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        <span class="hljs-keyword">for</span> <span class="hljs-variable">j</span> <span class="hljs-keyword">in</span> (i * i..=upper_limit).<span class="hljs-title function_ invoke__">step_by</span>(i <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>) &#123;<br>            sieve[j <span class="hljs-keyword">as</span> <span class="hljs-type">usize</span>] = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    sieve<br>        .<span class="hljs-title function_ invoke__">iter</span>()<br>        .<span class="hljs-title function_ invoke__">enumerate</span>()<br>        .<span class="hljs-title function_ invoke__">filter_map</span>(|(i, &amp;is_prime)| <span class="hljs-keyword">if</span> is_prime &#123; <span class="hljs-title function_ invoke__">Some</span>(i <span class="hljs-keyword">as</span> <span class="hljs-type">i64</span>) &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-literal">None</span> &#125;)<br>        .<span class="hljs-title function_ invoke__">collect</span>()<br>&#125;<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">largest_stable_number</span>(<br>    cur: <span class="hljs-type">usize</span>,<br>    digits: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt;,<br>    limit: &amp;<span class="hljs-type">Vec</span>&lt;<span class="hljs-type">i32</span>&gt;,<br>    leftover: <span class="hljs-type">i64</span>,<br>    with_limit: <span class="hljs-type">bool</span>,<br>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i64</span> &#123;<br>    <span class="hljs-keyword">if</span> leftover &lt; <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> cur == digits.<span class="hljs-title function_ invoke__">len</span>() &#123;<br>        <span class="hljs-keyword">if</span> leftover != <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">result</span> = <span class="hljs-number">0</span> <span class="hljs-keyword">as</span> <span class="hljs-type">i64</span>;<br>        <span class="hljs-keyword">for</span> &amp;digit <span class="hljs-keyword">in</span> digits.<span class="hljs-title function_ invoke__">iter</span>() &#123;<br>            result = result * <span class="hljs-number">10</span> + digit <span class="hljs-keyword">as</span> <span class="hljs-type">i64</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">upper_bound</span> = <span class="hljs-keyword">if</span> with_limit &#123; limit[cur] &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-number">9</span> &#125;;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">lower_bound</span> = <span class="hljs-keyword">if</span> cur == <span class="hljs-number">0</span> &#123; <span class="hljs-number">0</span> &#125; <span class="hljs-keyword">else</span> &#123; digits[cur - <span class="hljs-number">1</span>] &#125;;<br>    <span class="hljs-keyword">for</span> <span class="hljs-variable">i</span> <span class="hljs-keyword">in</span> (lower_bound..=upper_bound).<span class="hljs-title function_ invoke__">rev</span>() &#123;<br>        digits[cur] = i;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">new_with_limit</span> = with_limit;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">new_leftover</span> = leftover;<br>        <span class="hljs-keyword">if</span> i &lt; limit[cur] &#123;<br>            new_with_limit = <span class="hljs-literal">false</span>;<br>        &#125;<br>        new_leftover -= i <span class="hljs-keyword">as</span> <span class="hljs-type">i64</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">result</span> = <span class="hljs-title function_ invoke__">largest_stable_number</span>(cur + <span class="hljs-number">1</span>, digits, limit, new_leftover, new_with_limit);<br>        <span class="hljs-keyword">if</span> result != -<span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">return</span> result;<br>        &#125;<br>    &#125;<br>    -<span class="hljs-number">1</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Conclusion-总结"><a href="#Conclusion-总结" class="headerlink" title="Conclusion 总结"></a>Conclusion 总结</h2><p>The main focus of this problem is search pruning; a solid foundation in search algorithms is sufficient to solve it easily.</p><p>这题的考察点主要是搜索剪枝，有扎实的搜索算法基础即可轻松拿下本题。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FTQC Resource Estimator</title>
    <link href="/posts/26c5e265/"/>
    <url>/posts/26c5e265/</url>
    
    <content type="html"><![CDATA[<!-- @format --><h1 id="Why-We-Need-an-FTQC-Resource-Estimator"><a href="#Why-We-Need-an-FTQC-Resource-Estimator" class="headerlink" title="Why We Need an FTQC Resource Estimator"></a>Why We Need an FTQC Resource Estimator</h1><p>On NISQ (Noisy Intermediate-scale Quantum) devices, measuring the resource cost of an algorithm is very intuitive. By counting the number of gates the algorithm uses, the number of physical qubits, the circuit depth, and taking into account various hardware error rates and fidelities, one can roughly estimate an algorithm’s performance. However, in FTQC (Fault-Tolerant Quantum Computing) things become more complex. The most significant difference is that FTQC uses error-correcting codes with extra redundant physical qubits to suppress errors—see my previous blog post for details.</p><p>Consequently, in FTQC the “qubit count” refers to the number of <strong>encoded logical qubits</strong>, not the actual physical qubits. Each logical qubit typically requires dozens to hundreds of physical qubits for encoding. Moreover, certain special operations—such as the T gate in the surface code—demand additional physical qubits to implement. This makes resource accounting in FTQC far less straightforward. Therefore, we need a dedicated mechanism—the FTQC <strong>Resource Estimator</strong>—to measure algorithmic resource usage accurately.</p><h2 id="Runtime"><a href="#Runtime" class="headerlink" title="Runtime"></a>Runtime</h2><p>Estimating runtime in FTQC is relatively straightforward. First, we must know the time required for one round of quantum-error-correction (QEC). Using the surface code as an example, each correction round on the device involves the circuit below:</p><p><img src="/posts/26c5e265/FTQC%E9%87%8F%E5%AD%90%E8%B5%84%E6%BA%90%E8%AE%A1%E6%95%B0%E5%99%A8/1.png"></p><p>From this, one QEC round takes the time for two single-qubit gates plus four two-qubit gates. Moreover, to reduce measurement error, FTQC typically performs multiple correction rounds per gate. Thus the total runtime can be estimated as:</p><p>$$<br>T_{total} &#x3D; d_{rounds} \times depth \times \bigl(2,T_{one} + 4,T_{two}\bigr)<br>$$</p><h2 id="Physical-Qubit-Count"><a href="#Physical-Qubit-Count" class="headerlink" title="Physical Qubit Count"></a>Physical Qubit Count</h2><p>Estimating the physical qubit count is more involved. In surface-code QEC, the total physical qubits consist of two parts:  </p><ol><li>Physical qubits for the circuit’s logical qubits.  </li><li>Physical qubits for the magic-state factories (e.g., T-factories).</li></ol><h3 id="Code-Distance"><a href="#Code-Distance" class="headerlink" title="Code Distance"></a>Code Distance</h3><p>A code’s distance is (d), which determines its ability to correct up to (\left\lfloor\frac{d-1}{2}\right\rfloor) errors. In the surface code, one logical qubit with distance (d) requires (2d^2 - 1) physical qubits. Thus the chosen distance (d) sets both the physical-to-logical qubit ratio and the logical-qubit error rate. While larger (d) yields lower logical error rates, physical qubits are costly. Therefore, the Resource Estimator chooses the <strong>minimal (d)</strong> that ensures the algorithm’s expected total errors remain below one. This (d) is found via a combination of stimulus simulation, error-rate amplification, and binary search.</p><h3 id="Circuit-Physical-Qubit-Count"><a href="#Circuit-Physical-Qubit-Count" class="headerlink" title="Circuit Physical Qubit Count"></a>Circuit Physical Qubit Count</h3><p>Once (d) is determined, the physical qubits for the circuit’s logical qubits are:</p><p>$$<br>N_{pqubits} &#x3D; N_{lqubits} \times \bigl(2,d^2 - 1\bigr)<br>$$</p><h3 id="Magic-State-Factory-Physical-Qubit-Count"><a href="#Magic-State-Factory-Physical-Qubit-Count" class="headerlink" title="Magic-State Factory Physical Qubit Count"></a>Magic-State Factory Physical Qubit Count</h3><p>This completes the resource accounting. In any QEC code, there will be at least one gate that cannot be directly implemented; for the surface code, that is the T gate. Surface-code implementations only natively support Clifford gates, so non-Clifford gates require magic states generated by T-factories. Each T-factory produces one magic state, which, when entangled with a logical qubit, implements an approximate T gate.</p><p>Each T-factory itself uses 15 logical qubits, so its physical-qubit cost depends on the number of factories needed. That number is set by the T-gate frequency in the circuit. A single factory’s magic-state generation time is</p><p>$$<br>T_{Tstate} &#x3D; d_{rounds} \times 10 \times \bigl(2,T_{one} + 4,T_{two}\bigr),,<br>$$</p><p>so its generation rate is (T_{freq} &#x3D; 1 &#x2F; T_{Tstate}). Dividing the circuit’s T-gate rate (\bigl(N_{TGate}&#x2F;T_{total}\bigr)) by (T_{freq}) and rounding up gives</p><p>$$<br>N_{TFactory} &#x3D; \left\lceil \frac{N_{TGate}&#x2F;T_{total}}{T_{freq}} \right\rceil.<br>$$</p><p>Finally, the physical qubits for all T-factories are:</p><p>$$<br>N &#x3D; N_{TFactory} \times 15 \times \bigl(2,d^2 - 1\bigr).<br>$$</p><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>With the above, the FTQC Resource Estimator has accounted for all key algorithmic resources. For implementation details, see the code at:<br><a href="https://github.com/melody0123/QAOA4FTQC">https://github.com/melody0123/QAOA4FTQC</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Computing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>FTQC量子资源计数器</title>
    <link href="/posts/54f4eb84/"/>
    <url>/posts/54f4eb84/</url>
    
    <content type="html"><![CDATA[<h1 id="为什么需要FTQC资源计数器"><a href="#为什么需要FTQC资源计数器" class="headerlink" title="为什么需要FTQC资源计数器"></a>为什么需要FTQC资源计数器</h1><p>在NISQ(Noisy Intermediate-scale Quantum)设备上，衡量一个算法消耗的资源是非常直观的。通过算法使用的门的数量，物理比特的数量，电路的深度，物理硬件的各种错误率与保真度就可以大致的评估一个算法。但在FTQC(Fault Tolerant Quantum Computing)上事情却复杂一些。最关键的不同在于FTQC使用纠错码的方式通过设置更多冗余的物理比特来降低错误率，具体的细节可以参考之前的博文。</p><p>但对应的，在FTQC上，量子电路使用的比特数量是编码后的逻辑比特的数量而非真实的物理比特数量。对于每一个逻辑比特，FTQC都要使用数十到数百不定的物理比特来编码它。再加上有一些特殊的操作，比如对于surface code来说是T gate,每一个都需要额外的物理比特来实现。这让FTQC上的资源统计与评估变得没有那么直观。所以在FTQC上，我们需要一套特殊的机制来实现对于算法使用资源的衡量。</p><h1 id="运行时间"><a href="#运行时间" class="headerlink" title="运行时间"></a>运行时间</h1><p>在FTQC上，运行时间是相对容易统计的。首先我们需要知道的是一轮量子纠错码纠错所需要的时间。这里使用表面码作为样例，对于每一轮纠错，运行在量子设备上的电路为：</p><p><img src="/posts/54f4eb84/1.png"></p><p>由此可见，一轮纠错所需要的时间是两个单比特门的时间加上四个双比特门的时间。同时，为了减少测量错误，FTQC通常每一个门都会执行多轮纠错来降低错误率。这样，总运行时间的估算公式就可以得到了：</p><p>$$<br>T_{total} &#x3D; d_{rounds} * depth * (2 * T_{one} + 4 * T_{two})<br>$$</p><h1 id="物理比特数量"><a href="#物理比特数量" class="headerlink" title="物理比特数量"></a>物理比特数量</h1><p>估算物理比特数量则是一个更加复杂的问题，在基于表面码的量子纠错机制中，物理比特的数量可以分为两个部分统计：</p><ol><li>电路本身逻辑比特所用的物理比特的数量。</li><li>特殊门工厂所使用的物理比特的数量。</li></ol><h2 id="码距"><a href="#码距" class="headerlink" title="码距"></a>码距</h2><p>一个纠错码的码距为$d$，等同于这个纠错码可以纠正$\lfloor\frac{d-1}{2}\rfloor$个错误。在表面码里，码距为$d$的表面码需要用$2d^2 - 1$个物理比特实现一个逻辑比特。所以纠错码使用多少码距决定了一个逻辑比特对应多少物理比特以及这个逻辑比特的错误率是多少。一般来说，$d$越大，需要的物理比特越多，纠错性能越好。</p><p>从更低的错误率来说，码距当然是越高越好，但是物理量子比特数量是宝贵的资源。所以在FTQC资源计数器里，码距被设定为是“满足整个算法的期望错误数量&lt;1”的最小值。资源计数器通过stim模拟+倍增+二分的方法，来确定$d$的值具体是多少。</p><h2 id="电路物理比特数量"><a href="#电路物理比特数量" class="headerlink" title="电路物理比特数量"></a>电路物理比特数量</h2><p>确定码距之后，电路物理比特数量的公式就很简单了：</p><p>$$<br>N_{pqubits} &#x3D; N_{lqubits} * (2 * d^2 - 1)<br>$$</p><h2 id="特殊门工厂物理比特数量"><a href="#特殊门工厂物理比特数量" class="headerlink" title="特殊门工厂物理比特数量"></a>特殊门工厂物理比特数量</h2><p>这个值是统计FTQC使用资源的最后一块拼图。对于任何一种纠错码来说，想要实现模拟所有量子比特门的操作，就必然会存在一个门是无法直接实现的。对于表面码来说这个操作就是T-gate。普通的表面码只能实现Clifford门的直接模拟，对于非Clifford门，表面码必须引进T Gate来进行近似模拟。目前在表面码里实现T-Gate的方法是T-Factory。每个T-Factory可以生成一个魔法量子态，让这个量子态和逻辑比特纠缠就可以实现近似T-Gate的操作。</p><p>对于每一个T-factory来说，它需要15个逻辑比特，所以统计T-factory所需要的物理比特的数量就需要知道T-Factory的数量。而T-Factory的数量由T-Gate在电路里所需的频率决定。对于每个T-Factory，它需要生成一个魔法量子态的时间是$T_{Tstate}&#x3D;d_{rounds} * 10 * (2 * T_{one} + 4 * T_{two})$，所以T-Factory生成魔法量子态的速度为$T_{freq}&#x3D;\frac{1}{T_{Tstate}}$。用电路所需的T Gate的频率除以T Factory生成的速度向上取整，就可以得到T Factory所需的数量：$N_{TFactory} &#x3D; \frac{\frac{N_{TGate}}{T_{Total}}}{T_{freq}}$</p><p> 最后，T Factory所需的物理比特数量即为$N &#x3D; N_{TFactory} * 15 * (2 * d^2 - 1)$</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，所有FTQC量子算法所需要的资源都已经统计结束，具体的代码实现可以参考：<br><a href="https://github.com/melody0123/QAOA4FTQC">https://github.com/melody0123/QAOA4FTQC</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Computing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>How to setup and encrypt POSTEO mail service | 如何申请并加密POSTEO mail服务</title>
    <link href="/posts/bd9f93f7/"/>
    <url>/posts/bd9f93f7/</url>
    
    <content type="html"><![CDATA[<!-- @format --><h2 id="Why-You-Need-a-Privacy-Focused-Email"><a href="#Why-You-Need-a-Privacy-Focused-Email" class="headerlink" title="Why You Need a Privacy-Focused Email"></a>Why You Need a Privacy-Focused Email</h2><ol><li><p>Avoid Over-Centralization and Protect Your Real Identity: Most people currently use a setup consisting of a Gmail account plus a work or school email. Both are strongly tied to their real-world identities. If numerous services are integrated with these accounts, there’s a higher risk of exposing personal identity and sensitive information.</p></li><li><p>Data Collection: Most “free” email services collect users’ private information and profit by selling this data or using it for targeted advertising. This not only exposes your real information to the provider but also increases the risk of data leaks. A good privacy email service should offer end-to-end encryption, encrypted email content, and multi-factor authentication to prevent anyone — including the provider — from accessing your data.</p></li><li><p>Simplified Management: Most email services that focus on privacy offer aliasing features, allowing users to easily hide their real email addresses and block emails from specific websites directly.</p></li></ol><h2 id="为什么需要一个隐私邮箱"><a href="#为什么需要一个隐私邮箱" class="headerlink" title="为什么需要一个隐私邮箱"></a>为什么需要一个隐私邮箱</h2><ol><li><p>避免过度中心化保证真实信息的安全：目前许多人的邮箱配置是一个Gmail邮箱加工作&#x2F;学校邮箱。这两种邮箱都是与现实身份强挂钩的，如果有大量服务与这两个邮箱集成，真实身份与重要信息暴露的风险越大。</p></li><li><p>数据收集：大部分的“免费”邮箱服务会对用户的隐私信息进行收集，并通过贩卖信息，投放广告等行为牟利。这不仅让个人真实信息在服务商面前暴露无疑，同时进一步加剧了个人真实信息泄漏的风险。一个良好的隐私邮件服务应当支持全盘加密，邮箱内容加密和多因素认证等功能以防止任何人得到用户的数据，包括服务商自己。</p></li><li><p>管理简化：大多数以隐私为宣传点的邮箱服务都提供别名服务，可以很方便的隐藏自己的真实邮箱地址，以及直接屏蔽来自某些网站的邮件。</p></li></ol><h2 id="Why-POSTEO-mail-service-为什么推荐POSTEO-mail服务？"><a href="#Why-POSTEO-mail-service-为什么推荐POSTEO-mail服务？" class="headerlink" title="Why POSTEO mail service? 为什么推荐POSTEO-mail服务？"></a>Why POSTEO mail service? 为什么推荐POSTEO-mail服务？</h2><ul><li><p>Privacy and Security: POSTEO mail service supports the following encryption methods:</p><ul><li>Public Key Encryption: Emails are encrypted using the user’s uploaded PGP public key. This ensures that the service provider cannot see the content (excluding metadata).</li><li>SSL&#x2F;TLS Encryption: Provides SSL&#x2F;TLS encryption to protect privacy during email transmission.</li><li>Disk Encryption: User data on the server is encrypted via account password, including content and metadata.</li><li>Two-Factor Authentication &amp; App Passwords: Use two-factor authentication (e.g., two-factor authentication) to reduce the risk after the primary password is leaked. Use app passwords to reduce the risk of primary password leakage.</li></ul></li><li><p>Availability:</p><ul><li>Standard service includes IMAP, POP3, SMTP protocols, and supports various email formats and encodings.</li><li>Supports calendar and custom aliases (free 2).</li></ul></li><li><p>Pricing:</p><ul><li>Free service: None</li><li>Standard service: 1 EUR&#x2F;month</li></ul></li><li><p>隐私安全: POSTEO-mail服务支持的加密方式有以下几种:</p><ul><li>公钥加密: 使用用户自己上传的PGP公钥对邮件进行加密。保证邮件对服务商不可见。（不包括元数据）</li><li>SSL&#x2F;TLS加密: 提供SSL&#x2F;TLS加密，保护邮件传输过程中的隐私。</li><li>硬盘加密: 对服务器上的用户数据通过账户密码加密，包括内容和元数据。</li><li>多因素认证与应用密码: 使用多因素认证（如双因素认证）降低主密码泄露后的威胁。使用应用密码降低主密码泄漏的风险。</li></ul></li><li><p>可用性：</p><ul><li>标准服务包含IMAP、POP3、SMTP等协议，支持多种邮件格式和编码。</li><li>支持日历，自定义别名（免费2个）。</li></ul></li><li><p>价格：</p><ul><li>免费服务：无</li><li>标准服务: 1 EUR&#x2F;month</li></ul></li></ul><h2 id="How-to-apply-and-configure-POSTEO-mail-service-如何申请并配置POSTEO-mail服务？"><a href="#How-to-apply-and-configure-POSTEO-mail-service-如何申请并配置POSTEO-mail服务？" class="headerlink" title="How to apply and configure POSTEO-mail service? 如何申请并配置POSTEO-mail服务？"></a>How to apply and configure POSTEO-mail service? 如何申请并配置POSTEO-mail服务？</h2><h3 id="Step-1-Register-for-a-POSTEO-mail-account-第一步：注册一个POSTEO-mail账户"><a href="#Step-1-Register-for-a-POSTEO-mail-account-第一步：注册一个POSTEO-mail账户" class="headerlink" title="Step 1: Register for a POSTEO-mail account 第一步：注册一个POSTEO-mail账户"></a>Step 1: Register for a POSTEO-mail account 第一步：注册一个POSTEO-mail账户</h3><p><a href="https://posteo.de/en">https://posteo.de/en</a></p><p>Click sign up button and sign up as any other email service.<br>按下注册按钮并像其他邮箱一样注册。</p><h3 id="Step-2-Configure-MFA-第二步：配置MFA"><a href="#Step-2-Configure-MFA-第二步：配置MFA" class="headerlink" title="Step 2: Configure MFA 第二步：配置MFA"></a>Step 2: Configure MFA 第二步：配置MFA</h3><p>Login to your POSTEO-mail account and open MFA in password and security page. Don’t forget to setup app password at the bottom of the same page if you want to use it on third-party mail client.</p><p>登陆到你的POSTEO-mail账户，在密码和安全页面打开MFA。如果你想要使用它在第三方邮件客户端上，请设置应用密码。</p><h3 id="Step-3-Configure-Full-Disk-Encryption-第三步-配置全盘加密"><a href="#Step-3-Configure-Full-Disk-Encryption-第三步-配置全盘加密" class="headerlink" title="Step 3: Configure Full Disk Encryption 第三步: 配置全盘加密"></a>Step 3: Configure Full Disk Encryption 第三步: 配置全盘加密</h3><p>In the same page, select the “Encryption” section, enter a password, and enable encryption. Note that once enabled, if the user’s encryption key is lost, they will be unable to read the email content again, even after resetting the password, so be sure to save the password.</p><p>在同样的页面下选择”加密”这一栏, 输入密码并开启加密. 注意这里开启之后如果用户密钥丢失, 将无法再重新读取邮箱里的内容, 即使重置密码也一样, 所以请务必保存好密码.</p><h3 id="Step-4-Configure-Inbound-Encryption-第四步-配置入站加密"><a href="#Step-4-Configure-Inbound-Encryption-第四步-配置入站加密" class="headerlink" title="Step 4: Configure Inbound Encryption 第四步: 配置入站加密"></a>Step 4: Configure Inbound Encryption 第四步: 配置入站加密</h3><p>In the same page, select “PGP Encryption.” Here, you need to generate a PGP key locally and then send the public key to the mail server using your own email:</p><p>在同样的页面下选择”PGP加密”, 这里需要在本地先生成PGP密钥, 再通过自己的邮箱把公钥发送给邮件服务器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --full-generate-key<br></code></pre></td></tr></table></figure><p>When prompted for “Real name,” press Enter to skip, or enter your Posteo email address.</p><p>在提示输入“Real name”时，直接按回车键跳过，或输入您的 Posteo 邮箱地址。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">gpg --list-keys<br>gpg --armor --output public-key.asc --export &lt;the id showed in --listh-keys&gt;<br></code></pre></td></tr></table></figure><p>Finally, send this public key file to <a href="mailto:&#x6b;&#x65;&#x79;&#115;&#64;&#112;&#111;&#115;&#x74;&#101;&#111;&#46;&#100;&#101;">keys@posteo.de</a> using your own Posteo email.</p><p>最后将这个公钥文件通过自己的posteo邮箱发送给<a href="mailto:&#x6b;&#101;&#x79;&#115;&#x40;&#112;&#111;&#115;&#x74;&#101;&#111;&#x2e;&#x64;&#101;">keys@posteo.de</a>.</p><h2 id="Conclusion-总结"><a href="#Conclusion-总结" class="headerlink" title="Conclusion 总结"></a>Conclusion 总结</h2><p>以上步骤分别介绍了如何在Posteo Mail服务中申请并加密POSTEO邮件服务，以及如何配置入站加密。通过这些步骤，你可以成功地在Posteo Mail服务中实现邮件的加密功能，并且可以方便地管理和监控邮件发送和接收情况.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Interview: Safe Distance | 面试: 安全距离</title>
    <link href="/posts/3dfae82/"/>
    <url>/posts/3dfae82/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem-题面"><a href="#Problem-题面" class="headerlink" title="Problem 题面"></a>Problem 题面</h2><p>In a classroom with n seats, numbered from 0 to n-1, a student must choose the seat with the largest minimum distance to any other occupied seat. If multiple seats satisfy this condition, choose the seat with the smallest number.</p><p>Implement a class Room with the following method:</p><p>在一个教室里有 n 个座位, 编号为 0,1,2,…,n−1.<br>当有同学进教室时，他必须选择距离最近的同学之间的距离最大的位置坐下.<br>如果有多个位置满足条件, 选择编号最小的那个.</p><p>实现一个类Room, 包含以下方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Room</span>:<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, n: <span class="hljs-built_in">int</span></span>):<br>    ...<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">seat</span>(<span class="hljs-params">self</span>) -&gt; <span class="hljs-built_in">int</span>:  <span class="hljs-comment"># Return the index of the selected position 返回选中的位置</span><br>    ...<br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">leave</span>(<span class="hljs-params">self, pos: <span class="hljs-built_in">int</span></span>):  <span class="hljs-comment"># The person leave the classroom at position pos pos位置上的人离开教室</span><br>    ...<br></code></pre></td></tr></table></figure><h2 id="Code-代码"><a href="#Code-代码" class="headerlink" title="Code 代码"></a>Code 代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> heapq<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Interval</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, start, end, N</span>):<br>        <span class="hljs-variable language_">self</span>.start = start<br>        <span class="hljs-variable language_">self</span>.end = end<br>        <span class="hljs-variable language_">self</span>.N = N<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dist</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.start == -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.end<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.end == <span class="hljs-variable language_">self</span>.N:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.N - <span class="hljs-number">1</span> - <span class="hljs-variable language_">self</span>.start<br>        <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">self</span>.end - <span class="hljs-variable language_">self</span>.start) // <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__lt__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.dist() == other.dist():<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.start &lt; other.start<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.dist() &gt; other.dist()<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Room</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, N</span>):<br>        <span class="hljs-variable language_">self</span>.N = N<br>        <span class="hljs-variable language_">self</span>.heap = []<br>        <span class="hljs-variable language_">self</span>.start_map = &#123;&#125;<br>        <span class="hljs-variable language_">self</span>.end_map = &#123;&#125;<br>        <span class="hljs-variable language_">self</span>.seated = <span class="hljs-built_in">set</span>()<br><br>        initial = Interval(-<span class="hljs-number">1</span>, N, N)<br>        heapq.heappush(<span class="hljs-variable language_">self</span>.heap, initial)<br>        <span class="hljs-variable language_">self</span>.start_map[-<span class="hljs-number">1</span>] = initial<br>        <span class="hljs-variable language_">self</span>.end_map[N] = initial<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">seat</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.heap:<br>            interval = heapq.heappop(<span class="hljs-variable language_">self</span>.heap)<br>            start, end = interval.start, interval.end<br>            <span class="hljs-keyword">if</span> start <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.start_map <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.start_map[start] == interval:<br>                <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> start == -<span class="hljs-number">1</span>:<br>            seat = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">elif</span> end == <span class="hljs-variable language_">self</span>.N:<br>            seat = <span class="hljs-variable language_">self</span>.N - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            seat = (start + end) // <span class="hljs-number">2</span><br><br>        <span class="hljs-variable language_">self</span>.seated.add(seat)<br><br>        <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.start_map[start]<br>        <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.end_map[end]<br><br>        left = Interval(start, seat, <span class="hljs-variable language_">self</span>.N)<br>        right = Interval(seat, end, <span class="hljs-variable language_">self</span>.N)<br>        <span class="hljs-variable language_">self</span>.start_map[start] = left<br>        <span class="hljs-variable language_">self</span>.end_map[seat] = left<br>        <span class="hljs-variable language_">self</span>.start_map[seat] = right<br>        <span class="hljs-variable language_">self</span>.end_map[end] = right<br>        heapq.heappush(<span class="hljs-variable language_">self</span>.heap, left)<br>        heapq.heappush(<span class="hljs-variable language_">self</span>.heap, right)<br><br>        <span class="hljs-keyword">return</span> seat<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">leave</span>(<span class="hljs-params">self, p</span>):<br>        <span class="hljs-variable language_">self</span>.seated.remove(p)<br><br>        left = <span class="hljs-variable language_">self</span>.end_map.get(p)<br>        right = <span class="hljs-variable language_">self</span>.start_map.get(p)<br><br>        <span class="hljs-keyword">if</span> left:<br>            <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.start_map[left.start]<br>            <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.end_map[left.end]<br>        <span class="hljs-keyword">if</span> right:<br>            <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.start_map[right.start]<br>            <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.end_map[right.end]<br><br>        new_start = left.start <span class="hljs-keyword">if</span> left <span class="hljs-keyword">else</span> p<br>        new_end = right.end <span class="hljs-keyword">if</span> right <span class="hljs-keyword">else</span> p<br>        merged = Interval(new_start, new_end, <span class="hljs-variable language_">self</span>.N)<br>        <span class="hljs-variable language_">self</span>.start_map[new_start] = merged<br>        <span class="hljs-variable language_">self</span>.end_map[new_end] = merged<br>        heapq.heappush(<span class="hljs-variable language_">self</span>.heap, merged)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    room = Room(<span class="hljs-number">10</span>)<br>    <span class="hljs-built_in">print</span>(room.seat())<br>    <span class="hljs-built_in">print</span>(room.seat())<br>    <span class="hljs-built_in">print</span>(room.seat())<br>    <span class="hljs-built_in">print</span>(room.seat())<br>    room.leave(<span class="hljs-number">4</span>)<br>    <span class="hljs-built_in">print</span>(room.seat())<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h2 id="Analysis-解析"><a href="#Analysis-解析" class="headerlink" title="Analysis 解析"></a>Analysis 解析</h2><p>The key data structures for this problem are a heap and a dictionary. Initially, analyze the problem. Each time the seat() function is called, a seat must be found that offers the “largest minimum distance between neighboring students.” Although this constraint sounds complicated, it can be translated to: “Find the longest continuous unoccupied seat segment.” For each continuous unoccupied segment, the middle position is the position within that segment that offers the “largest minimum distance between neighboring students.” Thus, the distance is related only to the length of the current segment (specifically, half of the segment length, except for the initial and final segments, where the nearest distance is exactly twice the segment length).</p><p>这题考察的数据结构是堆+字典. 先简单分析一下题目, 每次调用seat()函数时要找到一个”距离最近的同学之间的距离最大”的位置, 尽管这个限制条件读起来相当拗口, 翻译成人话就是: “找出最大的一段连续空着的座位”. 因为对于每个连续空着的座位段, 中间位置就是这个段里”距离最近的同学之间的距离最大”的位置. 所以实际上的距离只和当前段长度有关, 更具体的说是当前段长度的一半 (其中最开始的最后的段是特殊的, 因为两头没有人所以最近的距离不是段长度的一半, 而是刚好一倍).</p><p>Therefore, the problem’s requirements become clear:</p><ol><li>Each call to seat() finds and returns the middle position of the longest continuous unoccupied segment. After returning, the segment is split into two halves at that position.</li><li>Each call to leave() removes the two segments separated by the leave() position and re-merges them.</li></ol><p>所以这题的需求就变得很清晰了:</p><ol><li>每次调用seat就把所有区间里最长的拿出来, 返回中点后把区间从那个位置掰成两半</li><li>每次调用leave就把leave的位置所区分的两个区间都去掉, 重新拼接起来</li></ol><p>The first function can be easily thought of using a heap data structure, but the second function cannot be implemented solely with a heap; it requires a dictionary for additional implementation.</p><p>第一个功能可以很容易想到堆的数据结构, 但是第二个功能只靠堆是无法实现的, 需要通过字典来额外实现</p><h3 id="Initialization-初始化"><a href="#Initialization-初始化" class="headerlink" title="Initialization 初始化"></a>Initialization 初始化</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Interval</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, start, end, N</span>):<br>        <span class="hljs-variable language_">self</span>.start = start<br>        <span class="hljs-variable language_">self</span>.end = end<br>        <span class="hljs-variable language_">self</span>.N = N<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">dist</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># No need need to divide by 2 because two heads nobody 因为两头没人所以长度不需要除以2</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.start == -<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.end<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.end == <span class="hljs-variable language_">self</span>.N:<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.N - <span class="hljs-number">1</span> - <span class="hljs-variable language_">self</span>.start<br>        <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">self</span>.end - <span class="hljs-variable language_">self</span>.start) // <span class="hljs-number">2</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__lt__</span>(<span class="hljs-params">self, other</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-variable language_">self</span>.dist() == other.dist():<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.start &lt; other.start<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">self</span>.dist() &gt; other.dist()<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Room</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, N</span>):<br>    <span class="hljs-variable language_">self</span>.N = N<br>    <span class="hljs-variable language_">self</span>.heap = []<br>    <span class="hljs-variable language_">self</span>.start_map = &#123;&#125;<br>    <span class="hljs-variable language_">self</span>.end_map = &#123;&#125;<br>    <span class="hljs-variable language_">self</span>.seated = <span class="hljs-built_in">set</span>()<br><br>    initial = Interval(-<span class="hljs-number">1</span>, N, N)<br>    heapq.heappush(<span class="hljs-variable language_">self</span>.heap, initial)<br>    <span class="hljs-variable language_">self</span>.start_map[-<span class="hljs-number">1</span>] = initial<br>    <span class="hljs-variable language_">self</span>.end_map[N] = initial<br><br></code></pre></td></tr></table></figure><p>First, design an <code>Interval</code> class to represent each continuous empty seat segment. The <code>dist()</code> function is used to calculate the maximum distance to the nearest classmate within the current segment. <code>__lt__(self, other)</code> is for calling the Python <code>heappush</code> and <code>heappop</code> functions because Python’s heap operations are a min-heap by default, so the definition of <code>__lt__(self, other)</code> is actually the opposite of the actual definition.</p><p>Then, initialize the <code>Room</code> class, where <code>start_map</code> and <code>end_map</code> respectively store <code>Interval</code> objects starting&#x2F;ending at key points. <code>seated</code> is used to record the set of occupied seats.</p><p>首先, 设计一个<code>Interval</code>类, 用于表示每个连续的空座位段. 其中<code>dist()</code>函数用来计算, 当前段内最大的到最近的同学的距离. <code>__lt__(self, other)</code>是为了调用后面python的<code>heappush</code>和<code>heappop</code>函数, 因为python的堆操作默认是小根堆, 所以这里<code>__lt__(self, other)</code>的定义其实是与实际定义相反的.</p><p>然后, 对<code>Room</code>类初始化, 其中<code>start_map</code>和<code>end_map</code>分别存储以key这个点开始&#x2F;结束的<code>Interval</code>.<code>seated</code>则是用来记录已经有人的座位的集合.</p><h3 id="Seat-Function-Seat-函数"><a href="#Seat-Function-Seat-函数" class="headerlink" title="Seat() Function Seat() 函数"></a>Seat() Function Seat() 函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">seat</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">while</span> <span class="hljs-variable language_">self</span>.heap:<br>        interval = heapq.heappop(<span class="hljs-variable language_">self</span>.heap)<br>        start, end = interval.start, interval.end<br>        <span class="hljs-keyword">if</span> start <span class="hljs-keyword">in</span> <span class="hljs-variable language_">self</span>.start_map <span class="hljs-keyword">and</span> <span class="hljs-variable language_">self</span>.start_map[start] == interval:  <span class="hljs-comment"># Verify the interval is valid 验证这个区间是存在的</span><br>            <span class="hljs-keyword">return</span> seat<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> start == -<span class="hljs-number">1</span>:<br>        seat = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">elif</span> end == <span class="hljs-variable language_">self</span>.N:<br>        seat = <span class="hljs-variable language_">self</span>.N - <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        seat = (start + end) // <span class="hljs-number">2</span><br><br>    <span class="hljs-variable language_">self</span>.seated.add(seat)<br><br>    <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.start_map[start]<br>    <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.end_map[end]<br><br>    left = Interval(start, seat, <span class="hljs-variable language_">self</span>.N)<br>    right = Interval(seat, end, <span class="hljs-variable language_">self</span>.N)<br>    <span class="hljs-variable language_">self</span>.start_map[start] = left<br>    <span class="hljs-variable language_">self</span>.end_map[seat] = left<br>    <span class="hljs-variable language_">self</span>.start_map[seat] = right<br>    <span class="hljs-variable language_">self</span>.end_map[end] = right<br>    heapq.heappush(<span class="hljs-variable language_">self</span>.heap, left)<br>    heapq.heappush(<span class="hljs-variable language_">self</span>.heap, right)<br></code></pre></td></tr></table></figure><p>First, take the largest interval from the <code>heap</code>, and simultaneously use <code>start_map</code> and <code>end_map</code> to determine whether the current interval actually exists (explained in the <code>leave</code> function). After taking out the largest interval, determine the position where the seat should be placed, then split the interval according to the seat’s position and update <code>start_map</code>, <code>end_map</code>, and <code>heap</code>.</p><p>首先从<code>heap</code>里拿出最大的区间, 同时通过<code>start_map</code>和<code>end_map</code>来判断当前取出来的区间是否实际存在 (<code>leave</code>函数中会解释为什么是这样做的). 取出最大区间后判断seat应该摆放的位置, 再把区间根据seat的位置分为两半并更新<code>start_map</code>, <code>end_map</code>与<code>heap</code>.</p><h3 id="Leave-Function-Leave-函数"><a href="#Leave-Function-Leave-函数" class="headerlink" title="Leave() Function Leave() 函数"></a>Leave() Function Leave() 函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Room</span>:<br>    ...<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">leave</span>(<span class="hljs-params">self, p</span>):<br>        <span class="hljs-variable language_">self</span>.seated.remove(p)<br><br>        left = <span class="hljs-variable language_">self</span>.end_map.get(p)<br>        right = <span class="hljs-variable language_">self</span>.start_map.get(p)<br><br>        <span class="hljs-keyword">if</span> left:<br>            <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.start_map[left.start]<br>            <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.end_map[left.end]<br>        <span class="hljs-keyword">if</span> right:<br>            <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.start_map[right.start]<br>            <span class="hljs-keyword">del</span> <span class="hljs-variable language_">self</span>.end_map[right.end]<br><br>        new_start = left.start <span class="hljs-keyword">if</span> left <span class="hljs-keyword">else</span> p<br>        new_end = right.end <span class="hljs-keyword">if</span> right <span class="hljs-keyword">else</span> p<br>        merged = Interval(new_start, new_end, <span class="hljs-variable language_">self</span>.N)<br>        <span class="hljs-variable language_">self</span>.start_map[new_start] = merged<br>        <span class="hljs-variable language_">self</span>.end_map[new_end] = merged<br>        heapq.heappush(<span class="hljs-variable language_">self</span>.heap, merged)<br></code></pre></td></tr></table></figure><p>First, find the two segments to be merged through <code>start_map</code> and <code>end_map</code>. Then merge these two segments into a new interval and add it to the heap. Theoretically, the algorithm should remove the original two intervals from the heap and then add the new interval to the heap. However, the heap does not natively support this operation, so simply ignore it here because the <code>seat()</code> function implements a verification process that checks whether the current interval corresponds to the intervals in <code>start_map</code> and <code>end_map</code>. If it doesn’t, it means that this interval no longer exists, so the algorithm will simply ignore it. This ensures the correctness of the answer even if the original interval is not deleted.</p><p>首先, 通过<code>start_map</code>和<code>end_map</code>找到需要拼接的两个段. 然后把这两个段合并成一个新的区间, 并将其加入到堆中. 理论上说, 算法应当把原来的两个区间从堆中弹出, 后将新的区间加入堆中。但是堆无法原生支持这种操作, 所以这里干脆直接不处理, 因为在之前的<code>seat()</code>函数中算法实现了一个验证处理, 查看当前取出来的区间是不是<code>start_map</code>和<code>end_map</code>对应的区间. 如果不是说明这个区间已经不存在了, 那么算法就会直接忽略它. 这样就算不删除原区间也不影响答案的正确性.</p><h3 id="Runtime-Analysis-时间复杂度分析"><a href="#Runtime-Analysis-时间复杂度分析" class="headerlink" title="Runtime Analysis 时间复杂度分析"></a>Runtime Analysis 时间复杂度分析</h3><p>算法里所有的堆操作时间复杂度都是<code>O(log n)</code>, 所以总时间复杂度为 <code>O(n log n)</code>, 这里<code>n</code>指的是操作数量.</p><p>All heap operations in the algorithm have a time complexity of <code>O(log n)</code>, so the total time complexity is <code>O(n log n)</code>. Here <code>n</code> is number of operations.</p><h2 id="Conclusion-总结"><a href="#Conclusion-总结" class="headerlink" title="Conclusion 总结"></a>Conclusion 总结</h2><p>This question is a moderately difficult data structure problem that involves slight modifications and optimizations to the original heap operations. It requires a good grasp of basic data structure operations and implementations, and is the type of problem that is easy to come up with an idea for but requires paying attention to many details in the actual implementation.</p><p>这道题是一道难度适中的数据结构题目, 在原本堆操作的基础上稍加修改优化. 需要熟练掌握数据结构的基本操作和实现, 是容易想出思路但是实际写起来需要注意很多细节的类型.</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><p>Don’t forget about <code>RUST</code> time.</p><p>来点<code>RUST</code></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> std::&#123;<br>    cmp::Reverse,<br>    collections::&#123;BinaryHeap, HashMap&#125;,<br>&#125;;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">room</span> = Room::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-number">10</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, room.<span class="hljs-title function_ invoke__">seat</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, room.<span class="hljs-title function_ invoke__">seat</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, room.<span class="hljs-title function_ invoke__">seat</span>());<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, room.<span class="hljs-title function_ invoke__">seat</span>());<br>    room.<span class="hljs-title function_ invoke__">leave</span>(<span class="hljs-number">4</span>);<br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;&#123;&#125;&quot;</span>, room.<span class="hljs-title function_ invoke__">seat</span>());<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Room</span> &#123;<br>    size: <span class="hljs-type">i32</span>,<br>    heap: BinaryHeap&lt;(<span class="hljs-type">i32</span>, Reverse&lt;<span class="hljs-type">i32</span>&gt;, Reverse&lt;<span class="hljs-type">i32</span>&gt;)&gt;,<br>    start_map: HashMap&lt;<span class="hljs-type">i32</span>, (<span class="hljs-type">i32</span>, Reverse&lt;<span class="hljs-type">i32</span>&gt;, Reverse&lt;<span class="hljs-type">i32</span>&gt;)&gt;,<br>    end_map: HashMap&lt;<span class="hljs-type">i32</span>, (<span class="hljs-type">i32</span>, Reverse&lt;<span class="hljs-type">i32</span>&gt;, Reverse&lt;<span class="hljs-type">i32</span>&gt;)&gt;,<br>&#125;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Room</span> &#123;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(size: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">heap</span> = BinaryHeap::<span class="hljs-title function_ invoke__">new</span>();<br>        heap.<span class="hljs-title function_ invoke__">push</span>((size, <span class="hljs-title function_ invoke__">Reverse</span>(-<span class="hljs-number">1</span>), <span class="hljs-title function_ invoke__">Reverse</span>(size)));<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">start_map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>        start_map.<span class="hljs-title function_ invoke__">insert</span>(-<span class="hljs-number">1</span>, (size, <span class="hljs-title function_ invoke__">Reverse</span>(-<span class="hljs-number">1</span>), <span class="hljs-title function_ invoke__">Reverse</span>(size)));<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">end_map</span> = HashMap::<span class="hljs-title function_ invoke__">new</span>();<br>        end_map.<span class="hljs-title function_ invoke__">insert</span>(size, (size, <span class="hljs-title function_ invoke__">Reverse</span>(-<span class="hljs-number">1</span>), <span class="hljs-title function_ invoke__">Reverse</span>(size)));<br>        Room &#123;<br>            size,<br>            heap,<br>            start_map,<br>            end_map,<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">dist</span>(&amp;<span class="hljs-keyword">self</span>, x: <span class="hljs-type">i32</span>, y: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>        <span class="hljs-keyword">if</span> x == -<span class="hljs-number">1</span> || y == <span class="hljs-keyword">self</span>.size &#123;<br>            <span class="hljs-title function_ invoke__">return</span> (y - x).<span class="hljs-title function_ invoke__">abs</span>() - <span class="hljs-number">2</span>;<br>        &#125;<br>        ((y - x).<span class="hljs-title function_ invoke__">abs</span>() - <span class="hljs-number">2</span>) / <span class="hljs-number">2</span><br>    &#125;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">seat</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">x</span> = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">y</span> = <span class="hljs-keyword">self</span>.size;<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">self</span>.heap.<span class="hljs-title function_ invoke__">len</span>() &gt; <span class="hljs-number">1</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">interval</span> = <span class="hljs-keyword">self</span>.heap.<span class="hljs-title function_ invoke__">pop</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.start_map.<span class="hljs-title function_ invoke__">contains_key</span>(&amp;interval.<span class="hljs-number">1</span> .<span class="hljs-number">0</span>)<br>                &amp;&amp; *<span class="hljs-keyword">self</span>.start_map.<span class="hljs-title function_ invoke__">get</span>(&amp;interval.<span class="hljs-number">1</span> .<span class="hljs-number">0</span>).<span class="hljs-title function_ invoke__">unwrap</span>() == interval<br>            &#123;<br>                x = interval.<span class="hljs-number">1</span> .<span class="hljs-number">0</span>;<br>                y = interval.<span class="hljs-number">2</span> .<span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">seat</span> = <span class="hljs-keyword">if</span> x == -<span class="hljs-number">1</span> &#123;<br>            <span class="hljs-number">0</span><br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> y == <span class="hljs-keyword">self</span>.size &#123;<br>                <span class="hljs-keyword">self</span>.size - <span class="hljs-number">1</span><br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                (x + y) / <span class="hljs-number">2</span><br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">left</span> = (<span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">dist</span>(x, seat), <span class="hljs-title function_ invoke__">Reverse</span>(x), <span class="hljs-title function_ invoke__">Reverse</span>(seat));<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">right</span> = (<span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">dist</span>(seat, y), <span class="hljs-title function_ invoke__">Reverse</span>(seat), <span class="hljs-title function_ invoke__">Reverse</span>(y));<br>        <span class="hljs-keyword">self</span>.start_map.<span class="hljs-title function_ invoke__">insert</span>(x, left);<br>        <span class="hljs-keyword">self</span>.start_map.<span class="hljs-title function_ invoke__">insert</span>(seat, right);<br>        <span class="hljs-keyword">self</span>.end_map.<span class="hljs-title function_ invoke__">insert</span>(seat, left);<br>        <span class="hljs-keyword">self</span>.end_map.<span class="hljs-title function_ invoke__">insert</span>(y, right);<br>        <span class="hljs-keyword">self</span>.heap.<span class="hljs-title function_ invoke__">push</span>(left);<br>        <span class="hljs-keyword">self</span>.heap.<span class="hljs-title function_ invoke__">push</span>(right);<br>        seat<br>    &#125;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">leave</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, pos: <span class="hljs-type">i32</span>) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">left</span> = <span class="hljs-keyword">self</span>.end_map.<span class="hljs-title function_ invoke__">get</span>(&amp;pos).<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-number">1</span> .<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">right</span> = <span class="hljs-keyword">self</span>.start_map.<span class="hljs-title function_ invoke__">get</span>(&amp;pos).<span class="hljs-title function_ invoke__">unwrap</span>().<span class="hljs-number">2</span> .<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">self</span>.start_map.<span class="hljs-title function_ invoke__">remove</span>(&amp;pos);<br>        <span class="hljs-keyword">self</span>.end_map.<span class="hljs-title function_ invoke__">remove</span>(&amp;pos);<br>        <span class="hljs-keyword">self</span>.start_map.<span class="hljs-title function_ invoke__">remove</span>(&amp;left);<br>        <span class="hljs-keyword">self</span>.end_map.<span class="hljs-title function_ invoke__">remove</span>(&amp;right);<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">merge</span> = (<span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">dist</span>(left, right), <span class="hljs-title function_ invoke__">Reverse</span>(left), <span class="hljs-title function_ invoke__">Reverse</span>(right));<br>        <span class="hljs-keyword">self</span>.start_map.<span class="hljs-title function_ invoke__">insert</span>(left, merge);<br>        <span class="hljs-keyword">self</span>.end_map.<span class="hljs-title function_ invoke__">insert</span>(right, merge);<br>        <span class="hljs-keyword">self</span>.heap.<span class="hljs-title function_ invoke__">push</span>(merge);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeetCode: Integer to English Words | 力扣: 整数转换英文表示</title>
    <link href="/posts/3911b54c/"/>
    <url>/posts/3911b54c/</url>
    
    <content type="html"><![CDATA[<h2 id="Problem-题面"><a href="#Problem-题面" class="headerlink" title="Problem 题面"></a>Problem 题面</h2><p><a href="https://leetcode.cn/problems/integer-to-english-words/description/">https://leetcode.cn/problems/integer-to-english-words/description/</a></p><h2 id="Code-代码"><a href="#Code-代码" class="headerlink" title="Code 代码"></a>Code 代码</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">impl</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_a_thousand</span>(num: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">use</span> std::collections::HashMap;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">ans</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">nums</span> = <span class="hljs-built_in">vec!</span>[<br>            (<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>),<br>            (<span class="hljs-number">1</span>, <span class="hljs-string">&quot;One&quot;</span>),<br>            (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Two&quot;</span>),<br>            (<span class="hljs-number">3</span>, <span class="hljs-string">&quot;Three&quot;</span>),<br>            (<span class="hljs-number">4</span>, <span class="hljs-string">&quot;Four&quot;</span>),<br>            (<span class="hljs-number">5</span>, <span class="hljs-string">&quot;Five&quot;</span>),<br>            (<span class="hljs-number">6</span>, <span class="hljs-string">&quot;Six&quot;</span>),<br>            (<span class="hljs-number">7</span>, <span class="hljs-string">&quot;Seven&quot;</span>),<br>            (<span class="hljs-number">8</span>, <span class="hljs-string">&quot;Eight&quot;</span>),<br>            (<span class="hljs-number">9</span>, <span class="hljs-string">&quot;Nine&quot;</span>),<br>            (<span class="hljs-number">10</span>, <span class="hljs-string">&quot;Ten&quot;</span>),<br>            (<span class="hljs-number">11</span>, <span class="hljs-string">&quot;Eleven&quot;</span>),<br>            (<span class="hljs-number">12</span>, <span class="hljs-string">&quot;Twelve&quot;</span>),<br>            (<span class="hljs-number">13</span>, <span class="hljs-string">&quot;Thirteen&quot;</span>),<br>            (<span class="hljs-number">14</span>, <span class="hljs-string">&quot;Fourteen&quot;</span>),<br>            (<span class="hljs-number">15</span>, <span class="hljs-string">&quot;Fifteen&quot;</span>),<br>            (<span class="hljs-number">16</span>, <span class="hljs-string">&quot;Sixteen&quot;</span>),<br>            (<span class="hljs-number">17</span>, <span class="hljs-string">&quot;Seventeen&quot;</span>),<br>            (<span class="hljs-number">18</span>, <span class="hljs-string">&quot;Eighteen&quot;</span>),<br>            (<span class="hljs-number">19</span>, <span class="hljs-string">&quot;Nineteen&quot;</span>),<br>            (<span class="hljs-number">20</span>, <span class="hljs-string">&quot;Twenty&quot;</span>),<br>            (<span class="hljs-number">30</span>, <span class="hljs-string">&quot;Thirty&quot;</span>),<br>            (<span class="hljs-number">40</span>, <span class="hljs-string">&quot;Forty&quot;</span>),<br>            (<span class="hljs-number">50</span>, <span class="hljs-string">&quot;Fifty&quot;</span>),<br>            (<span class="hljs-number">60</span>, <span class="hljs-string">&quot;Sixty&quot;</span>),<br>            (<span class="hljs-number">70</span>, <span class="hljs-string">&quot;Seventy&quot;</span>),<br>            (<span class="hljs-number">80</span>, <span class="hljs-string">&quot;Eighty&quot;</span>),<br>            (<span class="hljs-number">90</span>, <span class="hljs-string">&quot;Ninety&quot;</span>),<br>        ];<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">num_to_string</span>: HashMap&lt;_, _&gt; = nums.<span class="hljs-title function_ invoke__">into_iter</span>().<span class="hljs-title function_ invoke__">collect</span>();<br>        <span class="hljs-keyword">if</span> num &gt;= <span class="hljs-number">100</span> &#123;<br>            ans += num_to_string[&amp;(num / <span class="hljs-number">100</span>)];<br>            ans += <span class="hljs-string">&quot; Hundred &quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> num % <span class="hljs-number">100</span> &lt; <span class="hljs-number">20</span> &#123;<br>            ans += num_to_string[&amp;(num % <span class="hljs-number">100</span>)];<br>            <span class="hljs-keyword">return</span> ans.<span class="hljs-title function_ invoke__">trim</span>().<span class="hljs-title function_ invoke__">to_string</span>();<br>        &#125;<br>        ans += num_to_string[&amp;(num % <span class="hljs-number">100</span> - num % <span class="hljs-number">10</span>)];<br>        ans += <span class="hljs-string">&quot; &quot;</span>;<br>        ans += num_to_string[&amp;(num % <span class="hljs-number">10</span>)];<br>        ans.<span class="hljs-title function_ invoke__">trim</span>().<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">number_to_words</span>(num: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>        <span class="hljs-keyword">if</span> num == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Zero&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">out</span> = num / <span class="hljs-number">1000000000</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">ans</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>        <span class="hljs-keyword">if</span> out &gt; <span class="hljs-number">0</span> &#123;<br>            ans = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125; &#123;&#125; &quot;</span>, Solution::<span class="hljs-title function_ invoke__">print_a_thousand</span>(out), <span class="hljs-string">&quot;Billion&quot;</span>); <br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">out</span> = num / <span class="hljs-number">1000000</span> % <span class="hljs-number">1000</span>;<br>        <span class="hljs-keyword">if</span> out &gt; <span class="hljs-number">0</span> &#123;<br>            ans = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;&#123;&#125; &#123;&#125; &quot;</span>, ans, Solution::<span class="hljs-title function_ invoke__">print_a_thousand</span>(out), <span class="hljs-string">&quot;Million&quot;</span>); <br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">out</span> = num / <span class="hljs-number">1000</span> % <span class="hljs-number">1000</span>;<br>        <span class="hljs-keyword">if</span> out &gt; <span class="hljs-number">0</span> &#123;<br>            ans = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;&#123;&#125; &#123;&#125; &quot;</span>, ans, Solution::<span class="hljs-title function_ invoke__">print_a_thousand</span>(out), <span class="hljs-string">&quot;Thousand&quot;</span>); <br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">out</span> = num % <span class="hljs-number">1000</span>;<br>        <span class="hljs-keyword">if</span> out &gt; <span class="hljs-number">0</span> &#123;<br>            ans = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;&#123;&#125;&quot;</span>, ans, Solution::<span class="hljs-title function_ invoke__">print_a_thousand</span>(out)); <br>        &#125;<br>        ans.<span class="hljs-title function_ invoke__">trim</span>().<span class="hljs-title function_ invoke__">to_string</span>()<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Analysis-分析"><a href="#Analysis-分析" class="headerlink" title="Analysis 分析"></a>Analysis 分析</h2><p>This problem implements an interesting feature: converting a number to its English representation. This feature is often used when writing articles, so I specifically implemented this problem.</p><p>First, check the problem’s data range. $2 ^ {31} - 1 &#x3D; 2147483647$, so the English magnitude needs to be sufficient for billion. Then, according to the English number expression, in English, billion, million, and thousand are represented by a number every three digits. So the entire program can be divided into two steps:</p><ol><li>Implement English representation of numbers within 1000</li><li>Call the above function every three digits to output, and connect all outputs with billion, million, and thousand.</li></ol><p>这道题实现了一个有意思的小功能, 把一个数字转换为英文表示. 这个功能在我写文章的时候经常用到, 所以特地实现了一下本题.</p><p>首先查看题目的数据范围, $2 ^ {31} - 1 &#x3D; 2147483647$, 所以英文上数量级到billion足以. 然后根据英文数字的表达方式, 英语中billion, million, thousand是以每三个位为一个数字来表示的. 所以整个程序可以分为两步:</p><ol><li>实现了1000以内数字的英文表示</li><li>每三位调用上面的函数来输出, 并把所有的输出通过billion, million和thousand连接在一起</li></ol><h3 id="1-English-Representation-of-Numbers-smaller-than-1000-一千以内数字的英文表示"><a href="#1-English-Representation-of-Numbers-smaller-than-1000-一千以内数字的英文表示" class="headerlink" title="1. English Representation of Numbers smaller than 1000 一千以内数字的英文表示"></a>1. English Representation of Numbers smaller than 1000 一千以内数字的英文表示</h3><p>First, initialize the numbers that can be represented by a single word from 1 to 90 using a dictionary. Then extract the hundreds digit and output it with “Hundred”, and extract the ones and tens digits. If it’s less than 20, output the corresponding word directly. Otherwise, output it by adding the tens digit and the ones digit.</p><p>首先, 把1-90能用一个单词表示的数字用字典初始化. 然后先提取百分位输出并加上Hundred, 再提取个位和十位的数字, 如果小于20就直接输出对应单词, 否则通过十位加个位的方法来输出.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">fn</span> <span class="hljs-title function_">print_a_thousand</span>(num: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-keyword">use</span> std::collections::HashMap;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">ans</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">nums</span> = <span class="hljs-built_in">vec!</span>[<br>        (<span class="hljs-number">0</span>, <span class="hljs-string">&quot;&quot;</span>),<br>        (<span class="hljs-number">1</span>, <span class="hljs-string">&quot;One&quot;</span>),<br>        (<span class="hljs-number">2</span>, <span class="hljs-string">&quot;Two&quot;</span>),<br>        (<span class="hljs-number">3</span>, <span class="hljs-string">&quot;Three&quot;</span>),<br>        (<span class="hljs-number">4</span>, <span class="hljs-string">&quot;Four&quot;</span>),<br>        (<span class="hljs-number">5</span>, <span class="hljs-string">&quot;Five&quot;</span>),<br>        (<span class="hljs-number">6</span>, <span class="hljs-string">&quot;Six&quot;</span>),<br>        (<span class="hljs-number">7</span>, <span class="hljs-string">&quot;Seven&quot;</span>),<br>        (<span class="hljs-number">8</span>, <span class="hljs-string">&quot;Eight&quot;</span>),<br>        (<span class="hljs-number">9</span>, <span class="hljs-string">&quot;Nine&quot;</span>),<br>        (<span class="hljs-number">10</span>, <span class="hljs-string">&quot;Ten&quot;</span>),<br>        (<span class="hljs-number">11</span>, <span class="hljs-string">&quot;Eleven&quot;</span>),<br>        (<span class="hljs-number">12</span>, <span class="hljs-string">&quot;Twelve&quot;</span>),<br>        (<span class="hljs-number">13</span>, <span class="hljs-string">&quot;Thirteen&quot;</span>),<br>        (<span class="hljs-number">14</span>, <span class="hljs-string">&quot;Fourteen&quot;</span>),<br>        (<span class="hljs-number">15</span>, <span class="hljs-string">&quot;Fifteen&quot;</span>),<br>        (<span class="hljs-number">16</span>, <span class="hljs-string">&quot;Sixteen&quot;</span>),<br>        (<span class="hljs-number">17</span>, <span class="hljs-string">&quot;Seventeen&quot;</span>),<br>        (<span class="hljs-number">18</span>, <span class="hljs-string">&quot;Eighteen&quot;</span>),<br>        (<span class="hljs-number">19</span>, <span class="hljs-string">&quot;Nineteen&quot;</span>),<br>        (<span class="hljs-number">20</span>, <span class="hljs-string">&quot;Twenty&quot;</span>),<br>        (<span class="hljs-number">30</span>, <span class="hljs-string">&quot;Thirty&quot;</span>),<br>        (<span class="hljs-number">40</span>, <span class="hljs-string">&quot;Forty&quot;</span>),<br>        (<span class="hljs-number">50</span>, <span class="hljs-string">&quot;Fifty&quot;</span>),<br>        (<span class="hljs-number">60</span>, <span class="hljs-string">&quot;Sixty&quot;</span>),<br>        (<span class="hljs-number">70</span>, <span class="hljs-string">&quot;Seventy&quot;</span>),<br>        (<span class="hljs-number">80</span>, <span class="hljs-string">&quot;Eighty&quot;</span>),<br>        (<span class="hljs-number">90</span>, <span class="hljs-string">&quot;Ninety&quot;</span>),<br>    ];<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">num_to_string</span>: HashMap&lt;_, _&gt; = nums.<span class="hljs-title function_ invoke__">into_iter</span>().<span class="hljs-title function_ invoke__">collect</span>();<br>    <span class="hljs-keyword">if</span> num &gt;= <span class="hljs-number">100</span> &#123;<br>        ans += num_to_string[&amp;(num / <span class="hljs-number">100</span>)];<br>        ans += <span class="hljs-string">&quot; Hundred &quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> num % <span class="hljs-number">100</span> &lt; <span class="hljs-number">20</span> &#123;<br>        ans += num_to_string[&amp;(num % <span class="hljs-number">100</span>)];<br>        <span class="hljs-keyword">return</span> ans.<span class="hljs-title function_ invoke__">trim</span>().<span class="hljs-title function_ invoke__">to_string</span>();<br>    &#125;<br>    ans += num_to_string[&amp;(num % <span class="hljs-number">100</span> - num % <span class="hljs-number">10</span>)];<br>    ans += <span class="hljs-string">&quot; &quot;</span>;<br>    ans += num_to_string[&amp;(num % <span class="hljs-number">10</span>)];<br>    ans.<span class="hljs-title function_ invoke__">trim</span>().<span class="hljs-title function_ invoke__">to_string</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Representation-of-the-whole-number-整个数字的表示"><a href="#2-Representation-of-the-whole-number-整个数字的表示" class="headerlink" title="2. Representation of the whole number 整个数字的表示"></a>2. Representation of the whole number 整个数字的表示</h3><p>Extract the digits every three digits, call the <code>num_to_string</code> function, then add billion, million, and thousand according to the number of digits. And connect them together. Pay attention to handling spaces and trailing blanks.</p><p>每三位提取出数字调用 <code>num_to_string</code> 函数，然后根据位数来添加billion, million和thousand. 并将他们连接在一起. 注意处理空格和末尾空白.</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs Rust"><span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">number_to_words</span>(num: <span class="hljs-type">i32</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">String</span> &#123;<br>    <span class="hljs-keyword">if</span> num == <span class="hljs-number">0</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Zero&quot;</span>.<span class="hljs-title function_ invoke__">to_string</span>();<br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">out</span> = num / <span class="hljs-number">1000000000</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">ans</span> = <span class="hljs-type">String</span>::<span class="hljs-title function_ invoke__">new</span>();<br>    <span class="hljs-keyword">if</span> out &gt; <span class="hljs-number">0</span> &#123;<br>        ans = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125; &#123;&#125; &quot;</span>, Solution::<span class="hljs-title function_ invoke__">print_a_thousand</span>(out), <span class="hljs-string">&quot;Billion&quot;</span>); <br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">out</span> = num / <span class="hljs-number">1000000</span> % <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">if</span> out &gt; <span class="hljs-number">0</span> &#123;<br>        ans = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;&#123;&#125; &#123;&#125; &quot;</span>, ans, Solution::<span class="hljs-title function_ invoke__">print_a_thousand</span>(out), <span class="hljs-string">&quot;Million&quot;</span>); <br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">out</span> = num / <span class="hljs-number">1000</span> % <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">if</span> out &gt; <span class="hljs-number">0</span> &#123;<br>        ans = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;&#123;&#125; &#123;&#125; &quot;</span>, ans, Solution::<span class="hljs-title function_ invoke__">print_a_thousand</span>(out), <span class="hljs-string">&quot;Thousand&quot;</span>); <br>    &#125;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">out</span> = num % <span class="hljs-number">1000</span>;<br>    <span class="hljs-keyword">if</span> out &gt; <span class="hljs-number">0</span> &#123;<br>        ans = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;&#123;&#125;&quot;</span>, ans, Solution::<span class="hljs-title function_ invoke__">print_a_thousand</span>(out)); <br>    &#125;<br>    ans.<span class="hljs-title function_ invoke__">trim</span>().<span class="hljs-title function_ invoke__">to_string</span>()<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Conclusion-总结"><a href="#Conclusion-总结" class="headerlink" title="Conclusion 总结"></a>Conclusion 总结</h2><p>This problem is a simple string processing problem with a medium-easy difficulty. Regarding the fact that this problem is in the mathematics section on LeetCode and has a hard difficulty rating, I am confused, but it is indeed a pretty interesting problem.</p><p>这道题是一道简单的字符串处理题目, 难度在中等偏简单. 至于LeetCode上这道题是数学分区且难度分级是Hard我表示疑惑, 不过确实是挺有意思的一题.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Quantum Error Correction: Shor Code</title>
    <link href="/posts/127662ed/"/>
    <url>/posts/127662ed/</url>
    
    <content type="html"><![CDATA[<p>Quantum error correction algorithms are a core technology in the field of quantum computing, designed to address the issue of quantum bits (qubits) being highly susceptible to environmental interference, which can lead to information loss or errors. Due to the characteristics of quantum systems, such as superposition and quantum entanglement, quantum information is extremely fragile, and even minor noise or phase shifts can compromise the accuracy of computations. Quantum error correction works by designing special encoding schemes to distribute the information of a single qubit across multiple physical qubits, enabling the detection and correction of errors without destroying the quantum state.</p><p>For example, classical quantum error correction codes include the Shor Code, Steane Code, and Surface Code. These algorithms can identify and repair bit-flip errors, phase-flip errors, or errors involving both, thereby providing a solid foundation for building reliable large-scale quantum computers. This article will introduce the architecture of the Shor Code.</p><h1 id="Bit-Flip"><a href="#Bit-Flip" class="headerlink" title="Bit Flip"></a>Bit Flip</h1><p>A bit-flip error is one of the most common types of errors in quantum computing. It refers to the unintended flipping of a qubit’s state from $ |0\rangle $ to $ |1\rangle $, or from $ |1\rangle $ to $ |0\rangle $. This type of error is analogous to a bit flip in classical computing but, in the context of quantum computing, it requires error-correcting codes to detect and correct the error in order to preserve the integrity of quantum information.</p><h2 id="Correction-Circuit"><a href="#Correction-Circuit" class="headerlink" title="Correction Circuit"></a>Correction Circuit</h2><ul><li>First, a logical qubit is represented using three physical qubits through the use of controlled-X (CX) gates. The CX gate works as follows: if the control qubit’s state is $ |1\rangle $, it flips the value of the target qubit. In the setup described, this means that if $ q_0 $ (the control qubit) is in the state $ |1\rangle $, the corresponding target qubits, $ q_1 $ and $ q_2 $, will have their states flipped. This process encodes the logical qubit into a redundant form using three physical qubits, providing resilience against bit-flip errors.</li></ul><p><img src="/posts/127662ed/9fafab4b-f7f8-4815-8500-599576ae1f1f.png"></p><ul><li>If a bit-flip error occurs in one of the three physical qubits representing the logical qubit:</li></ul><p><img src="/posts/127662ed/45b58c05-d21f-4a36-9f33-671196ff3b3a.png"></p><ul><li>Check the parity of adjacent qubits pairwise using CX gates.</li></ul><p><img src="/posts/127662ed/d7264dce-dfce-4b61-b271-6fa0cbc19d94.png"></p><ul><li>Using $q_3$​ and $q_4$​’s values, the location of the bit-flip error can be determined:</li></ul><table><thead><tr><th>$q_3q_4$</th><th>Err</th></tr></thead><tbody><tr><td>00</td><td>N&#x2F;A</td></tr><tr><td>10</td><td>q0</td></tr><tr><td>11</td><td>q1</td></tr><tr><td>01</td><td>q2</td></tr></tbody></table><p>In the example above, the measurement result of $q_3q_4$​ is 11, which indicates that a bit-flip occurred on $q_1$.</p><ul><li>Based on the corresponding encoding, apply a corrective flip at the specified position. In this case, an $X$-gate is applied to $q_1$​.</li></ul><p><img src="/posts/127662ed/42e3e338-4727-4dd9-ab54-b5114bb509d5.png"></p><h2 id="Accuracy-Calculate"><a href="#Accuracy-Calculate" class="headerlink" title="Accuracy Calculate"></a>Accuracy Calculate</h2><p>Since this basic circuit uses only three qubits, it can tolerate at most one bit-flip error. If more than one bit-flip occurs, the circuit cannot correct the errors accurately. Assuming the probability of a bit-flip error for a single physical qubit is $ p $, the number of bit-flip errors in this circuit follows a $ Binary(3, p) $ distribution.</p><p>The probability of a logical qubit experiencing a bit-flip error is $ p^3 + 3p^2(1 - p) $, which is the sum of the probabilities of exactly three bit-flip errors and exactly two bit-flip errors.</p><p>If we plot these probabilities, the graph shows that for $ p &lt; 0.5 $, this logical qubit provides a lower error rate compared to a single physical qubit.</p><p><img src="/posts/127662ed/image_2025-01-08_10-14-29.png" alt="Graph of error probabilities"></p><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>Experiment with whether this circuit works as designed by testing it through simulating bit-flip errors by manually adding X-gates at predetermined positions.</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/posts/127662ed/d9c3ff0e-5556-4b29-8740-4df0e9c50cfc.png"></div><div class="group-image-wrap"><img src="/posts/127662ed/a531af4b-85af-4bab-ad57-b0bc44aa41c1.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/posts/127662ed/76f9a782-3363-4f27-8c8f-763305a4802a.png"></div><div class="group-image-wrap"><img src="/posts/127662ed/a531af4b-85af-4bab-ad57-b0bc44aa41c1.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/posts/127662ed/e0a0c764-909a-4ff1-8342-99f26597c7ee.png"></div><div class="group-image-wrap"><img src="/posts/127662ed/a531af4b-85af-4bab-ad57-b0bc44aa41c1.png"></div></div></div><p>It can be observed that, in the simulated tests, a bit-flip error occurring on any one of $ q_0 $, $ q_1 $, or $ q_2 $ does not affect the state of the current logical qubit.</p><h1 id="Phase-Flip"><a href="#Phase-Flip" class="headerlink" title="Phase Flip"></a>Phase Flip</h1><p>Phase-flip error is another common type of error, which occurs when a quantum bit unintentionally has a $ Z $-gate applied to it ($ Z|0\rangle &#x3D; |0\rangle $, $ Z|1\rangle &#x3D; -|1\rangle $). This type of error cannot be detected using the bit-flip detection circuit described above. However, with a slight modification, the circuit can be adapted to detect phase-flip errors as well.</p><h2 id="Correction-Circuit-1"><a href="#Correction-Circuit-1" class="headerlink" title="Correction Circuit"></a>Correction Circuit</h2><ul><li>Similar to the bit-flip correction circuit, a logical qubit is represented using three physical qubits, and a Hadamard gate is applied to each qubit. The purpose of using the Hadamard gate for encoding is that if a phase-flip occurs on any qubit, it will flip $ |+\rangle $ to $ |-\rangle $. Finally, by applying the Hadamard gate again for decoding, the state will return to $ |0\rangle $ and $ |1\rangle $. This way, the phase-flip error is transformed into a bit-flip error.</li></ul><p><img src="/posts/127662ed/41ff177e-2348-4be0-b561-467ab134d3f3.png"></p><ul><li>Use CX gates to check whether adjacent qubits are equal. Unlike the bit-flip detection circuit, in this case, a Hadamard gate is applied to the qubits being checked, and the direction of the CX gate is reversed.</li></ul><p><img src="/posts/127662ed/d6146133-e052-4969-ad0a-a0e178114040.png"></p><p>We can use the following equation to understand how phase-flip error detection for a qubit is implemented.<br>$$<br>|- +\rangle \xrightarrow{expand}<br>\frac{1}{2}(|00\rangle + |01\rangle - |10\rangle - |11\rangle)<br>\xrightarrow{cx(0, 1)} \frac{1}{2}(|00\rangle + |11\rangle - |10\rangle - |01\rangle)<br>\xrightarrow{reorder} |- -\rangle<br>$$</p><p>It can be seen that, through the CX gate, the $ |-\rangle $ state from the detected position is propagated to the qubit at the detection location. This achieves a similar effect to the bit-flip error detection described earlier.</p><ul><li>Similar to the bit-flip circuit, apply the corrective $ Z $-gate to the qubit at the position corresponding to the measurement result.</li></ul><p><img src="/posts/127662ed/8778f677-f027-47f7-bb13-c9f1d7ca98b1.png"></p><ul><li>Finally, decode the physically encoded qubits back to their original states using the Hadamard gate.</li></ul><p><img src="/posts/127662ed/7e19b997-e7cd-4c9c-abd0-7f162172c633.png"></p><h2 id="Test-1"><a href="#Test-1" class="headerlink" title="Test"></a>Test</h2><p>Experiment to check if the circuit works properly. Since Hadamard gates are used for encoding and decoding, any phase-flip that occurs in the middle will be converted into a bit-flip, which can then be detected through measurement.</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/posts/127662ed/9cc9d438-c438-46ee-a2a5-3921aa4b18aa.png"></div><div class="group-image-wrap"><img src="/posts/127662ed/a531af4b-85af-4bab-ad57-b0bc44aa41c1.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/posts/127662ed/c6e37afa-84e2-4ae7-9bdb-c88a9406de39.png"></div><div class="group-image-wrap"><img src="/posts/127662ed/a531af4b-85af-4bab-ad57-b0bc44aa41c1.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/posts/127662ed/523bc553-fbe9-4f6c-97b6-edac3cf5d0c3.png"></div><div class="group-image-wrap"><img src="/posts/127662ed/a531af4b-85af-4bab-ad57-b0bc44aa41c1.png"></div></div></div><p>As shown in the diagram, if there is a phase-flip error on one of the three physical qubits, it can be corrected.</p><h2 id="Remain-Problem"><a href="#Remain-Problem" class="headerlink" title="Remain Problem"></a>Remain Problem</h2><p>So far, circuits have been provided to handle both bit-flip and phase-flip errors, but the common issue is that each circuit can only handle one type of error and cannot correct the other type. The following will introduce a complete solution to handle both types of errors.</p><h1 id="Shor-Code"><a href="#Shor-Code" class="headerlink" title="Shor Code"></a>Shor Code</h1><p>If both bit-flip and phase-flip errors occur simultaneously on a logical qubit, the solution is naturally to nest both error-correction circuits. Specifically, the three physical qubits in the phase-flip correction circuit are each represented by three bit-flip correction circuits. Of course, the reverse can also be done.</p><p>This approach results in the Shor Code, which can simultaneously handle both bit-flip and phase-flip errors.</p><h2 id="Correction-Circuit-2"><a href="#Correction-Circuit-2" class="headerlink" title="Correction Circuit"></a>Correction Circuit</h2><p><img src="/posts/127662ed/2e3b9efd-0e2e-4f8f-8113-b061bec9f8c3.png"></p><h2 id="Accuracy-Calculate-1"><a href="#Accuracy-Calculate-1" class="headerlink" title="Accuracy Calculate"></a>Accuracy Calculate</h2><p>The accuracy of the Shor Code is the same as the previous two error-correction circuits, as it can correct any single bit-flip or phase-flip. Therefore, its error rate is given by:</p><p>$$1 - (1 - p) ^ 9 - 9 * p * (1 - p) ^ 8$$</p><p>where $p$ is the probability of a single physical qubit experiencing a bit-flip or phase-flip.</p><p> <img src="/posts/127662ed/image_2025-01-13_10-29-18.png"></p><p>As seen in the graph, when $ p &lt; 0.0323 $, the Shor Code performs better than a single physical qubit.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Computing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Quantum Error Correction: Stablizer</title>
    <link href="/posts/b8221040/"/>
    <url>/posts/b8221040/</url>
    
    <content type="html"><![CDATA[<!-- @format --><p>After a simple example of Shor Code, this article will introduce stabilizer as a tool to build and analyze quantum error correction circuits.</p><h1 id="Why-do-we-need-stabilizers"><a href="#Why-do-we-need-stabilizers" class="headerlink" title="Why do we need stabilizers?"></a>Why do we need stabilizers?</h1><p>One key point of quantum error correction is to detect whether the logical qubit has been affected by errors or not without measuring the qubit directly. This is because measurement would destroy the quantum state and cause it to collapse, rendering the qubit unusable.</p><p>Stabilizers work by creating quantum entanglement between target qubits and ancilla (detector) qubits. By measuring the ancilla qubits, we can obtain information about the target qubits’ state without destroying them—a mechanism similar to quantum teleportation.</p><h1 id="Measurement-via-Pauli-Operations"><a href="#Measurement-via-Pauli-Operations" class="headerlink" title="Measurement via Pauli Operations"></a>Measurement via Pauli Operations</h1><p>First we need to understand the most basic component of stablizer.</p><p>Consider the following circuit:</p><p><img src="/posts/b8221040/Quantum-Error-Correction-Stablizer/circ1.png"></p><p>Assume that $q_0$ is in an arbitrary quantum state. What information can we obtain by measuring $q_1$ in this circuit?</p><p>$$<br>\begin{align}<br>q_0 q_1 &amp;&#x3D; (a|0\rangle + b|1\rangle) \otimes |0\rangle \\<br>&amp;\xrightarrow{\text{H}(1)} (a|0\rangle + b|1\rangle) \otimes |+\rangle \\<br>&amp;\xrightarrow{\text{CNOT}(1,0)} \frac{1}{\sqrt{2}}(a|00\rangle + b|01\rangle + b|10\rangle + a|11\rangle) \\<br>&amp;\xrightarrow{\text{H}(1)} \frac{1}{\sqrt{2}}\left[(a + b)|+\rangle \otimes |0\rangle + (a - b)|-\rangle \otimes |1\rangle\right]<br>\end{align}<br>$$</p><p>Thus, measuring $q_1$ corresponds to measuring $q_0$ in the $\lbrace|+\rangle, |-\rangle\rbrace$ basis instead of the $\lbrace|0\rangle, |1\rangle\rbrace$ basis. The key feature of this circuit is that it avoids direct measurement of $q_0$, allowing it to remain usable for subsequent computations.</p><p>From the perspective of Pauli Matrixs, we can get</p><p>$$<br>X &#x3D; |+\rangle\langle+| - |-\rangle\langle-|<br>$$</p><p>therefore the projective measurement defined by X is:</p><p>$$<br>\lbrace∣+\rangle\langle+∣, ∣−\rangle\langle−∣\rbrace<br>$$</p><p>Similiarly, we get</p><p>$$<br>\begin{align}<br>&amp;Y &#x3D; |+i\rangle\langle+i| - |-i\rangle\langle-i| \\<br>&amp;Z &#x3D; |0\rangle\langle0| - |1\rangle\langle1|<br>\end{align}<br>$$</p><p>The measurements defined by $X, Y,$ and $Z,$ are viewed as pauli observables.</p><p>If we combine two pauli observables together:</p><p>$$<br>Z⊗Z&#x3D;(∣0⟩⟨0∣−∣1⟩⟨1∣)⊗(∣0⟩⟨0∣−∣1⟩⟨1∣)&#x3D;(∣00⟩⟨00∣+∣11⟩⟨11∣)−(∣01⟩⟨01∣+∣10⟩⟨10∣)<br>$$</p><p>If, for instance, we were to measure a $∣ϕ^+⟩$ Bell state nondestructively using this measurement, then we would be certain to obtain the outcome 0, and the state would be unchanged as a result of the measurement. In particular, the state would not collapse to $∣00⟩$ or $∣11⟩$.</p><h1 id="Definition-of-stablizer"><a href="#Definition-of-stablizer" class="headerlink" title="Definition of stablizer"></a>Definition of stablizer</h1><p>An n-qubit stabilizer code is specified by a list of n-qubit Pauli operations, $P1,…,Pr$​. These operations are called stabilizer generators in this context, and they must satisfy the following three properties.</p><ol><li><p>The stabilizer generators all commute with one another.</p></li><li><p>The stabilizer generators form a minimal generating set.</p></li><li><p>At least one quantum state vector is fixed by all of the stabilizer generators.</p></li></ol><p>Now we can describe nine qubit shor code as:</p><p>$$<br>\begin{align}<br>Z⊗Z⊗I⊗I⊗&amp;I⊗I⊗I⊗I⊗I \\<br>I⊗Z⊗Z⊗I⊗&amp;I⊗I⊗I⊗I⊗I \\<br>I⊗I⊗I⊗Z⊗&amp;Z⊗I⊗I⊗I⊗I \\<br>I⊗I⊗I⊗I⊗&amp;Z⊗Z⊗I⊗I⊗I \\<br>I⊗I⊗I⊗I⊗&amp;I⊗I⊗Z⊗Z⊗I \\<br>I⊗I⊗I⊗I⊗&amp;I⊗I⊗I⊗Z⊗Z \\<br>X⊗X⊗X⊗X⊗&amp;X⊗X⊗I⊗I⊗I \\<br>I⊗I⊗I⊗X⊗&amp;X⊗X⊗X⊗X⊗X​<br>\end{align}<br>$$</p>]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Computing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>量子纠错: Shor Code</title>
    <link href="/posts/e600f8d3/"/>
    <url>/posts/e600f8d3/</url>
    
    <content type="html"><![CDATA[<p>量子纠错算法是量子计算领域的核心技术之一,旨在应对量子比特(qubits)易受环境干扰导致信息丢失或出错的问题。由于量子系统的特性, 如叠加态和量子纠缠, 使得量子信息极其脆弱, 任何微小的噪声或相位偏移都可能破坏计算的准确性。量子纠错通过设计特殊的编码方案, 将一个量子比特的信息分布到多个物理量子比特上, 从而检测和纠正错误, 而不会破坏量子态。例如, 经典的量子纠错码包括肖尔码 (Shor Code), 斯坦恩码 (Steane Code) 和表面码 (Surface Code). 这些算法能够识别和修复比特翻转 (bit-flip) 错误、相位翻转 (phase-flip) 错误或两者同时发生的错误, 为构建可靠的大规模量子计算机提供了坚实的基础。这篇文章将介绍Shor Code的架构.</p><h1 id="Bit-Flip"><a href="#Bit-Flip" class="headerlink" title="Bit Flip"></a>Bit Flip</h1><p>bit flip error (比特翻转错误) 是最常见的一种错误类型，它指的是一个量子比特的状态意外从 $|0\rangle$ 翻转为 $|1\rangle$，或者从 $|1\rangle$ 翻转为 $|0\rangle$。这种错误类似于经典计算中比特的翻转，但在量子计算中需要通过纠错编码来检测和修正，以保护量子信息的完整性。</p><h2 id="Correction-Circuit"><a href="#Correction-Circuit" class="headerlink" title="Correction Circuit"></a>Correction Circuit</h2><ul><li>首先通过cx将一个逻辑比特用三个物理比特表示 (cx为control-x, 效果为如果控制位的qubit的值为1, 则翻转对应的qubit, 在下图中表现为如果q0为$|1\rangle$, 对应翻转q1和q2的值)</li></ul><p><img src="/posts/e600f8d3/9fafab4b-f7f8-4815-8500-599576ae1f1f.png"></p><ul><li>假设三个逻辑比特中的一个出现了比特翻转错误</li></ul><p><img src="/posts/e600f8d3/45b58c05-d21f-4a36-9f33-671196ff3b3a.png"></p><ul><li>通过cx检查两两相邻的qubit的奇偶性</li></ul><p><img src="/posts/e600f8d3/d7264dce-dfce-4b61-b271-6fa0cbc19d94.png"></p><ul><li>这样根据q3,q4的值,就可以推导出比特翻转发生的位置:</li></ul><table><thead><tr><th>q3q4</th><th>Err</th></tr></thead><tbody><tr><td>00</td><td>N&#x2F;A</td></tr><tr><td>10</td><td>q0</td></tr><tr><td>11</td><td>q1</td></tr><tr><td>01</td><td>q2</td></tr></tbody></table><p>在上面的案例里, q3q4 measure的结果是11, 也就是说q1出现了比特翻转.</p><ul><li>根据对应的编码对指定的位置进行反向翻转, 在上面的案例里就是在q1上应用X门</li></ul><p><img src="/posts/e600f8d3/42e3e338-4727-4dd9-ab54-b5114bb509d5.png"></p><h2 id="Accuracy-Calculate"><a href="#Accuracy-Calculate" class="headerlink" title="Accuracy Calculate"></a>Accuracy Calculate</h2><p>因为这个最基本的电路只有三个比特, 所以它只能容忍一个比特的翻转错误, 超过一个比特就无法正确的纠错了. 假设一个物理比特的出现翻转错误的概率是p, 也就是说这个电路出现翻转错误的比特的数量~$Binary(3, p)$. 那么这个逻辑比特的出现翻转错误的概率就是$p^3 + 3 * p ^ 2 * (1 - p)$, 即出现三个翻转错误和两个翻转错误的概率之和. 如果绘制出这两个概率的曲线, 可以看到:</p><p><img src="/posts/e600f8d3/image_2025-01-08_10-14-29.png"></p><p>在p &lt; 0.5时, 这个Logical Bit能给我们带来更低的错误率.</p><h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><p>实验一下这个电路能否按照设计的工作, 测试通过在预定位置手动添加X门的方式来模拟bit flip error.</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/posts/e600f8d3/d9c3ff0e-5556-4b29-8740-4df0e9c50cfc.png"></div><div class="group-image-wrap"><img src="/posts/e600f8d3/a531af4b-85af-4bab-ad57-b0bc44aa41c1.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/posts/e600f8d3/76f9a782-3363-4f27-8c8f-763305a4802a.png"></div><div class="group-image-wrap"><img src="/posts/e600f8d3/a531af4b-85af-4bab-ad57-b0bc44aa41c1.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/posts/e600f8d3/e0a0c764-909a-4ff1-8342-99f26597c7ee.png"></div><div class="group-image-wrap"><img src="/posts/e600f8d3/a531af4b-85af-4bab-ad57-b0bc44aa41c1.png"></div></div></div><p>可以看见, 在模拟测试下, q0, q1, q2三个比特中的任意一个比特发生bit flip error并不会影响当前逻辑比特的状态.</p><h1 id="Phase-Flip"><a href="#Phase-Flip" class="headerlink" title="Phase Flip"></a>Phase Flip</h1><p>phase flip error相位反转错误是另一种常见的错误类型, 可以表示为一个量子比特意外被添加了一个Z门 ($Z|0&gt; &#x3D; |0&gt;, Z|1&gt; &#x3D; -|1&gt;$).<br>这种错误用上面的的比特翻转的检测电路无法检测到, 但稍加修改就可以在phase flip error上应用.</p><h2 id="Correction-Circuit-1"><a href="#Correction-Circuit-1" class="headerlink" title="Correction Circuit"></a>Correction Circuit</h2><ul><li><p>与bit flip correction circuit一样, 用三个物理比特表示一个逻辑比特, 并且为每个比特添加一个Hadamard门. 用Hadamard门编码的目的是如果phase flip发生在某一个比特上, 它就会把$|+\rangle$翻转为$|-\rangle$, 最后再通过Hadamard门解码就会重新变回$|0\rangle$和$|1\rangle$的状态. 这样就实现了把phase flip转化为了bit flip<br><img src="/posts/e600f8d3/41ff177e-2348-4be0-b561-467ab134d3f3.png"></p></li><li><p>使用cx检测相邻qubit是否相等, 与bit flip的电路不同的是, 这里对检测的qubit添加了Hadamard门并且翻转了cx的方向.</p></li></ul><p><img src="/posts/e600f8d3/d6146133-e052-4969-ad0a-a0e178114040.png"></p><p>我们可以用下面这个式子来理解对于一个比特的phase flip error检测是如何实现的<br>$$<br>|- +\rangle \xrightarrow{expand}<br>\frac{1}{2}(|00\rangle + |01\rangle - |10\rangle - |11\rangle)<br>\xrightarrow{cx(0, 1)} \frac{1}{2}(|00\rangle + |11\rangle - |10\rangle - |01\rangle)<br>\xrightarrow{reorder} |- -\rangle<br>$$</p><p>可以看见, 通过cx门, 被检测位置的$|-\rangle$被传播到了检测位置的比特上, 这样就实现了与上面bit flip检测类似的效果</p><ul><li>与bit flip circuit类似, 在measure结果对应的位置的比特上应用修复的Z门</li></ul><p><img src="/posts/e600f8d3/8778f677-f027-47f7-bb13-c9f1d7ca98b1.png"></p><ul><li>最后把用Hadamard门编码的物理比特解码为原本的状态</li></ul><p><img src="/posts/e600f8d3/7e19b997-e7cd-4c9c-abd0-7f162172c633.png"></p><h2 id="Test-1"><a href="#Test-1" class="headerlink" title="Test"></a>Test</h2><p>实验电路是否正常工作, 因为使用了Hadamard门编码解码, 这样在中间发生的phase flip将会被转换为bit flip并可以通过measure检测.</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/posts/e600f8d3/9cc9d438-c438-46ee-a2a5-3921aa4b18aa.png"></div><div class="group-image-wrap"><img src="/posts/e600f8d3/a531af4b-85af-4bab-ad57-b0bc44aa41c1.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/posts/e600f8d3/c6e37afa-84e2-4ae7-9bdb-c88a9406de39.png"></div><div class="group-image-wrap"><img src="/posts/e600f8d3/a531af4b-85af-4bab-ad57-b0bc44aa41c1.png"></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="/posts/e600f8d3/523bc553-fbe9-4f6c-97b6-edac3cf5d0c3.png"></div><div class="group-image-wrap"><img src="/posts/e600f8d3/a531af4b-85af-4bab-ad57-b0bc44aa41c1.png"></div></div></div><p>如图所示, 三个物理比特上如果存在一个phase flip error是可以被纠正的</p><h2 id="Remain-Problem"><a href="#Remain-Problem" class="headerlink" title="Remain Problem"></a>Remain Problem</h2><p>到目前为止, bit flip error和phase flip error都有对应的电路解决了, 但共有的问题就在于任意一种电路都没法处理另一种类型的错误. 而下面就会介绍完备的解决方案.</p><h1 id="Shor-Code"><a href="#Shor-Code" class="headerlink" title="Shor Code"></a>Shor Code</h1><p>如果比特翻转和相位翻转错误同时发生在一个逻辑比特上, 解决方案自然是吧两种纠错电路嵌套起来, 具体来说就是把phase flip correction circuit里的三个物理比特分别用三个bit flip correction circuit表示, 当然反过来也可以.<br>这样就得到了可以同时处理bit flip和phase flip的Shor Code.</p><h2 id="Correction-Circuit-2"><a href="#Correction-Circuit-2" class="headerlink" title="Correction Circuit"></a>Correction Circuit</h2><p><img src="/posts/e600f8d3/2e3b9efd-0e2e-4f8f-8113-b061bec9f8c3.png"></p><h2 id="Accuracy-Calculate-1"><a href="#Accuracy-Calculate-1" class="headerlink" title="Accuracy Calculate"></a>Accuracy Calculate</h2><p>Shor Code的准确率和之前两个纠错电路一样, 可以纠正任何单个比特的翻转. 所以它的错误率为$1 - (1 - p) ^ 9 - 9 * p * (1 - p) ^ 8$ (p 为单物理比特发生bit flip或phas flip的概率).</p><p> <img src="/posts/e600f8d3/image_2025-01-13_10-29-18.png"></p><p>可以看到, 当 $ p &lt; 0.0323 $ 的时候, shor code可以有比单物理比特更好的表现.</p>]]></content>
    
    
    
    <tags>
      
      <tag>Quantum Computing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Network Flow</title>
    <link href="/posts/ea1c16df/"/>
    <url>/posts/ea1c16df/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Problem-Description"><a href="#1-Problem-Description" class="headerlink" title="1: Problem Description"></a>1: Problem Description</h2><p>As stated, given a network graph with a source node and a sink node, calculate the maximum flow in the network.</p><h3 id="1-1-Input-Format"><a href="#1-1-Input-Format" class="headerlink" title="1.1: Input Format"></a>1.1: Input Format</h3><p>The first line contains four positive integers: $$n,m,s,t$$, representing the number of nodes, the number of directed edges, the source node index, and the sink node index, respectively.</p><p>The following mm lines each contain three positive integers: $u_i,v_i,w_i​$, representing the i-th directed edge starting from uiui​, ending at $v_i$​, with a weight $w_i$​ (indicating the maximum flow capacity of the edge).</p><h3 id="1-2-Output-Format"><a href="#1-2-Output-Format" class="headerlink" title="1.2: Output Format"></a>1.2: Output Format</h3><p>A single line containing a single positive integer, which is the maximum flow in the network.</p><h3 id="1-3-Example"><a href="#1-3-Example" class="headerlink" title="1.3: Example"></a>1.3: Example</h3><h4 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">4 5 4 3<br>4 2 30<br>4 3 20<br>2 3 20<br>2 1 30<br>1 3 30<br></code></pre></td></tr></table></figure><h4 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">50<br></code></pre></td></tr></table></figure><h2 id="2-Solution-1-Edmonds–Karp-Algorithm"><a href="#2-Solution-1-Edmonds–Karp-Algorithm" class="headerlink" title="2: Solution 1: Edmonds–Karp Algorithm"></a>2: Solution 1: Edmonds–Karp Algorithm</h2><ol><li>Find a path from the source ss to the sink tt where all edges have remaining capacity ($capacity−flow&gt;0$). Such a path is called “connected.”</li><li>Determine the bottleneck capacity along this path as $Augment&#x3D;min⁡(capacity−flow)$.</li><li>Add the $Augment$ to the maxflow result</li><li>Repeat the previous steps until the algorithm cannot find any connected path from s to t</li></ol><h3 id="2-1-Code-Part"><a href="#2-1-Code-Part" class="headerlink" title="2.1: Code (Part)"></a>2.1: Code (Part)</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs rust">.....<br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">max_flow</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, s: <span class="hljs-type">usize</span>, t: <span class="hljs-type">usize</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">flow</span> = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">loop</span> &#123;<br>        <span class="hljs-comment">// Reset for BFS</span><br>        <span class="hljs-keyword">self</span>.a.<span class="hljs-title function_ invoke__">fill</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">queue</span> = VecDeque::<span class="hljs-title function_ invoke__">new</span>();<br>        queue.<span class="hljs-title function_ invoke__">push_back</span>(s);<br>        <span class="hljs-keyword">self</span>.a[s] = INF;<br><br>        <span class="hljs-comment">// Perform BFS</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(x) = queue.<span class="hljs-title function_ invoke__">pop_front</span>() &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(edges) = <span class="hljs-keyword">self</span>.graph.<span class="hljs-title function_ invoke__">get</span>(&amp;x) &#123;<br>                <span class="hljs-keyword">for</span> &amp;i <span class="hljs-keyword">in</span> edges &#123;<br>                    <span class="hljs-keyword">let</span> <span class="hljs-variable">edge</span> = &amp;<span class="hljs-keyword">self</span>.edges[i];<br>                    <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.a[edge.to] == <span class="hljs-number">0</span> &amp;&amp; edge.cap &gt; edge.flow &#123;<br>                        <span class="hljs-keyword">self</span>.p[edge.to] = <span class="hljs-title function_ invoke__">Some</span>(i);<br>                        <span class="hljs-keyword">self</span>.a[edge.to] = <span class="hljs-title function_ invoke__">min</span>(<span class="hljs-keyword">self</span>.a[x], edge.cap - edge.flow);<br>                        queue.<span class="hljs-title function_ invoke__">push_back</span>(edge.to);<br>                        <span class="hljs-keyword">if</span> edge.to == t &#123;<br>                            <span class="hljs-keyword">break</span>;<br>                        &#125;<br>                    &#125;<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.a[t] == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">break</span>; <span class="hljs-comment">// No more augmenting path found</span><br>        &#125;<br><br>        <span class="hljs-comment">// Augment flow along the path</span><br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">u</span> = t;<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(edge_index) = <span class="hljs-keyword">self</span>.p[u] &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">edge</span> = &amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>.edges[edge_index];<br>            edge.flow += <span class="hljs-keyword">self</span>.a[t];<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">reverse_edge_index</span> = edge_index ^ <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">self</span>.edges[reverse_edge_index].flow -= <span class="hljs-keyword">self</span>.a[t];<br>            u = edge.from;<br>        &#125;<br><br>        flow += <span class="hljs-keyword">self</span>.a[t];<br>    &#125;<br><br>    flow<br>&#125;<br>.....<br></code></pre></td></tr></table></figure><h3 id="2-2-Time-Complexity-Analysis"><a href="#2-2-Time-Complexity-Analysis" class="headerlink" title="2.2: Time Complexity Analysis"></a>2.2: Time Complexity Analysis</h3><ul><li>The time complexity of finding augment path for one time is $O(m)$</li><li>The upper limit of times of Augument is $O(nm)$</li><li>So the time complexity of this algorithm is $O(nm^2)$</li></ul><h2 id="3-Solution-2-Dinic-Algorithm"><a href="#3-Solution-2-Dinic-Algorithm" class="headerlink" title="3: Solution 2: Dinic Algorithm"></a>3: Solution 2: Dinic Algorithm</h2><p>The Dinic algorithm works by dividing the graph into layers and repeatedly finding augmenting paths to increase the flow. Here’s the main idea:</p><ol><li><p><strong>BFS Layering:</strong> First, perform a Breadth-First Search (BFS) to divide the graph into layers. The distance from a node uu to the source ss determines its layer. Remove edges where the flow is equal to or exceeds the capacity to create the “level graph” $G_L&#x3D;(V,E_L)$.</p></li><li><p><strong>Blocking Flow:</strong> In the level graph $G_L$​, find a maximal flow that cannot be further augmented. This is called the blocking flow.</p></li><li><p><strong>Repeat:</strong> Continue finding and adding blocking flows to the total flow until no augmenting path exists between the source s and the sink t.</p></li></ol><h3 id="3-1-Key-Optimization"><a href="#3-1-Key-Optimization" class="headerlink" title="3.1: Key Optimization"></a>3.1: Key Optimization</h3><p>While performing DFS to find blocking flows:</p><ul><li><p>If you encounter a node u where all outgoing edges are already saturated, skip u.</p></li><li><p>Maintain a pointer for each node uu to keep track of which edge to explore next. This prevents revisiting edges unnecessarily and improves efficiency.</p></li></ul><h3 id="3-2-Code-Part"><a href="#3-2-Code-Part" class="headerlink" title="3.2: Code (Part)"></a>3.2: Code (Part)</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-meta">#[derive(Clone)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>    to: <span class="hljs-type">usize</span>,<br>    nxt: <span class="hljs-type">usize</span>,<br>    cap: <span class="hljs-type">i32</span>,<br>    flow: <span class="hljs-type">i32</span>,<br>&#125;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">MaxFlow</span> &#123;<br>    s: <span class="hljs-type">usize</span>,<br>    t: <span class="hljs-type">usize</span>,<br>    head: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">usize</span>&gt;,<br>    edge: <span class="hljs-type">Vec</span>&lt;Edge&gt;,<br>    maxflow: <span class="hljs-type">isize</span>,<br>    depth: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">usize</span>&gt;,<br>&#125;<br><span class="hljs-keyword">impl</span> <span class="hljs-title class_">MaxFlow</span> &#123;<br>    <span class="hljs-comment">/// Creates a new `MaxFlow` instance with `n` nodes, source node `s`, and sink node `t`.</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(n: <span class="hljs-type">usize</span>, s: <span class="hljs-type">usize</span>, t: <span class="hljs-type">usize</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>        <span class="hljs-keyword">Self</span> &#123;<br>            s,<br>            t,<br>            head: <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0x3f3f3f3f</span>; n],<br>            edge: <span class="hljs-built_in">vec!</span>[],<br>            maxflow: <span class="hljs-number">0</span>,<br>            depth: <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0</span>; n],<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-comment">/// Adds a directed edge from `from` to `to` with capacity `cap` to the flow network.</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// # Arguments</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// `from`: The node from which the edge originates.</span><br>    <span class="hljs-comment">/// `to`: The node to which the edge points.</span><br>    <span class="hljs-comment">/// `cap`: The capacity of the edge.</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_edge</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>, from: <span class="hljs-type">usize</span>, to: <span class="hljs-type">usize</span>, cap: <span class="hljs-type">i32</span>) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">m</span> = <span class="hljs-keyword">self</span>.edge.<span class="hljs-title function_ invoke__">len</span>();<br>        <span class="hljs-keyword">self</span>.edge.<span class="hljs-title function_ invoke__">push</span>(Edge &#123;<br>            to,<br>            nxt: <span class="hljs-keyword">self</span>.head[from],<br>            cap,<br>            flow: <span class="hljs-number">0</span>,<br>        &#125;);<br>        <span class="hljs-keyword">self</span>.head[from] = m;<br>        <span class="hljs-keyword">self</span>.edge.<span class="hljs-title function_ invoke__">push</span>(Edge &#123;<br>            to: from,<br>            nxt: <span class="hljs-keyword">self</span>.head[to],<br>            cap: <span class="hljs-number">0</span>,<br>            flow: <span class="hljs-number">0</span>,<br>        &#125;);<br>        <span class="hljs-keyword">self</span>.head[to] = m + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">/// Performs a BFS traversal of the residual graph to mark static nodes and find a shortest path from the source `s` to the sink `t`.</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// Returns `true` if a path is found, and `false` otherwise.</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">bfs</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">q</span> = std::collections::VecDeque::<span class="hljs-title function_ invoke__">new</span>();<br>        q.<span class="hljs-title function_ invoke__">push_back</span>(<span class="hljs-keyword">self</span>.s);<br>        <span class="hljs-keyword">self</span>.depth.<span class="hljs-title function_ invoke__">fill</span>(<span class="hljs-number">0x3f3f3f3f</span>);<br>        <span class="hljs-keyword">self</span>.depth[<span class="hljs-keyword">self</span>.s] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> !q.<span class="hljs-title function_ invoke__">is_empty</span>() &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">u</span> = q.<span class="hljs-title function_ invoke__">pop_front</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">e</span> = <span class="hljs-keyword">self</span>.head[u];<br>            <span class="hljs-keyword">while</span> e != <span class="hljs-number">0x3f3f3f3f</span> &#123;<br>                <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = <span class="hljs-keyword">self</span>.edge[e].to;<br>                <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.edge[e].flow &lt; <span class="hljs-keyword">self</span>.edge[e].cap &amp;&amp; <span class="hljs-keyword">self</span>.depth[v] &gt; <span class="hljs-keyword">self</span>.depth[u] + <span class="hljs-number">1</span> &#123;<br>                    <span class="hljs-keyword">self</span>.depth[v] = <span class="hljs-keyword">self</span>.depth[u] + <span class="hljs-number">1</span>;<br>                    q.<span class="hljs-title function_ invoke__">push_back</span>(v);<br>                &#125;<br>                e = <span class="hljs-keyword">self</span>.edge[e].nxt;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">self</span>.depth[<span class="hljs-keyword">self</span>.t] != <span class="hljs-number">0x3f3f3f3f</span><br>    &#125;<br>    <span class="hljs-comment">/// Performs a DFS traversal of the residual graph to find a path from node `u` to the sink `t`.</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// Returns the maximum flow that can be pushed along the path.</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// # Arguments</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// `u`: The starting node of the path.</span><br>    <span class="hljs-comment">/// `flow`: The maximum flow to be pushed along the path.</span><br>    <span class="hljs-comment">/// `edges`: The vector of edges in the residual graph.</span><br>    <span class="hljs-comment">/// `cur`: The vector of current edges for each node in the residual graph.</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">dfs</span>(&amp;<span class="hljs-keyword">self</span>, u: <span class="hljs-type">usize</span>, flow: <span class="hljs-type">i32</span>, edges: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">Vec</span>&lt;Edge&gt;, cur: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">usize</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>        <span class="hljs-keyword">if</span> u == <span class="hljs-keyword">self</span>.t || flow == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> flow;<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">res</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">e</span> = cur[u];<br>        <span class="hljs-keyword">while</span> e != <span class="hljs-number">0x3f3f3f3f</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = edges[e].to;<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">self</span>.depth[v] == <span class="hljs-keyword">self</span>.depth[u] + <span class="hljs-number">1</span> &#123;<br>                <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">dfs</span>(<br>                    v,<br>                    std::cmp::<span class="hljs-title function_ invoke__">min</span>(flow - res, edges[e].cap - edges[e].flow),<br>                    edges,<br>                    cur,<br>                );<br>                edges[e].flow += f;<br>                edges[e ^ <span class="hljs-number">1</span>].flow -= f;<br>                res += f;<br>                <span class="hljs-keyword">if</span> res == flow &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            e = <span class="hljs-keyword">self</span>.edge[e].nxt;<br>            cur[u] = e;<br>        &#125;<br>        res<br>    &#125;<br>    <span class="hljs-comment">/// Computes the maximum flow in the flow network using the Dinic&#x27;s algorithm.</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// This function repeatedly calls `bfs` to find a shortest augmenting path</span><br>    <span class="hljs-comment">/// and `dfs` to augment the flow along the path. The maximum flow is</span><br>    <span class="hljs-comment">/// accumulated in `maxflow` field.</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">dinic</span>(&amp;<span class="hljs-keyword">mut</span> <span class="hljs-keyword">self</span>) &#123;<br>        <span class="hljs-keyword">while</span> <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">bfs</span>() &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">cur</span> = <span class="hljs-keyword">self</span>.head.<span class="hljs-title function_ invoke__">clone</span>();<br>            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">edge</span> = <span class="hljs-keyword">self</span>.edge.<span class="hljs-title function_ invoke__">clone</span>();<br>            <span class="hljs-keyword">self</span>.maxflow += <span class="hljs-keyword">self</span>.<span class="hljs-title function_ invoke__">dfs</span>(<span class="hljs-keyword">self</span>.s, std::<span class="hljs-type">i32</span>::MAX, &amp;<span class="hljs-keyword">mut</span> edge, &amp;<span class="hljs-keyword">mut</span> cur) <span class="hljs-keyword">as</span> <span class="hljs-type">isize</span>;<br>            <span class="hljs-keyword">self</span>.edge = edge;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-Soluiton-3-ISAP-Algorithmn"><a href="#4-Soluiton-3-ISAP-Algorithmn" class="headerlink" title="4: Soluiton 3: ISAP Algorithmn"></a>4: Soluiton 3: ISAP Algorithmn</h2><ol><li><p>Perform a BFS from t to s and mark the depth (why it’s from t to s will be explained later).</p></li><li><p>Perform a DFS from s to t, similar to Dinic’s algorithm. However, after finishing processing a node, if the flow passed from the previous node exceeds the used capacity of the current node (for the current depth), the current node is considered “wasted” for the remaining path. In this case, increment its depth by 1. If a gap (a depth level with no nodes) appears, terminate the algorithm.</p></li><li><p>If step 2 does not terminate the algorithm, repeat step 2.</p></li></ol><h3 id="4-1-Optimization"><a href="#4-1-Optimization" class="headerlink" title="4.1: Optimization"></a>4.1: Optimization</h3><p>Compare to Dinic Algorithm, ISAP doesnt require to run bfs several times.</p><h3 id="4-2-Code-Part"><a href="#4-2-Code-Part" class="headerlink" title="4.2: Code (Part)"></a>4.2: Code (Part)</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">mod</span> maxflow &#123;<br>    <span class="hljs-meta">#[derive(Clone)]</span><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Edge</span> &#123;<br>        to: <span class="hljs-type">usize</span>,<br>        nxt: <span class="hljs-type">usize</span>,<br>        cap: <span class="hljs-type">i32</span>,<br>        flow: <span class="hljs-type">i32</span>,<br>    &#125;<br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Graph</span> &#123;<br>        n: <span class="hljs-type">usize</span>,<br>        s: <span class="hljs-type">usize</span>,<br>        t: <span class="hljs-type">usize</span>,<br>        head: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">usize</span>&gt;,<br>        edge: <span class="hljs-type">Vec</span>&lt;Edge&gt;,<br>        <span class="hljs-keyword">pub</span> maxflow: <span class="hljs-type">isize</span>,<br>        depth: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">usize</span>&gt;,<br>        gap: <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">usize</span>&gt;,<br>    &#125;<br>    <span class="hljs-keyword">impl</span> <span class="hljs-title class_">Graph</span> &#123;<br>        <span class="hljs-comment">/// Creates a new `MaxFlow` instance with `n` nodes, source node `s`, and sink node `t`.</span><br>        <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">new</span>(n: <span class="hljs-type">usize</span>, s: <span class="hljs-type">usize</span>, t: <span class="hljs-type">usize</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">Self</span> &#123;<br>            <span class="hljs-keyword">Self</span> &#123;<br>                n,<br>                s,<br>                t,<br>                head: <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0x3f3f3f3f</span>; n],<br>                edge: <span class="hljs-built_in">vec!</span>[],<br>                maxflow: <span class="hljs-number">0</span>,<br>                depth: <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0x3f3f3f3f</span>; n],<br>                gap: <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0</span>; n * <span class="hljs-number">2</span>],<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/// Adds a directed edge from `from` to `to` with capacity `cap` to the flow network.</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// # Arguments</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// `from`: The node from which the edge originates.</span><br>    <span class="hljs-comment">/// `to`: The node to which the edge points.</span><br>    <span class="hljs-comment">/// `cap`: The capacity of the edge.</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">add_edge</span>(g: &amp;<span class="hljs-keyword">mut</span> Graph, from: <span class="hljs-type">usize</span>, to: <span class="hljs-type">usize</span>, cap: <span class="hljs-type">i32</span>) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">m</span> = g.edge.<span class="hljs-title function_ invoke__">len</span>();<br>        g.edge.<span class="hljs-title function_ invoke__">push</span>(Edge &#123;<br>            to,<br>            nxt: g.head[from],<br>            cap,<br>            flow: <span class="hljs-number">0</span>,<br>        &#125;);<br>        g.head[from] = m;<br>        g.edge.<span class="hljs-title function_ invoke__">push</span>(Edge &#123;<br>            to: from,<br>            nxt: g.head[to],<br>            cap: <span class="hljs-number">0</span>,<br>            flow: <span class="hljs-number">0</span>,<br>        &#125;);<br>        g.head[to] = m + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-comment">/// Performs a BFS traversal of the residual graph to mark static nodes and find a shortest path from the source `s` to the sink `t`.</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// Returns `true` if a path is found, and `false` otherwise.</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">generate_depth</span>(g: &amp;<span class="hljs-keyword">mut</span> Graph) &#123;<br>        g.depth = <span class="hljs-built_in">vec!</span>[<span class="hljs-number">0x3f3f3f3f</span>; g.n];<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">q</span> = std::collections::VecDeque::<span class="hljs-title function_ invoke__">new</span>();<br>        q.<span class="hljs-title function_ invoke__">push_back</span>(g.t);<br>        g.depth[g.t] = <span class="hljs-number">0</span>;<br>        g.gap[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> !q.<span class="hljs-title function_ invoke__">is_empty</span>() &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">u</span> = q.<span class="hljs-title function_ invoke__">pop_front</span>().<span class="hljs-title function_ invoke__">unwrap</span>();<br>            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">e</span> = g.head[u];<br>            <span class="hljs-keyword">while</span> e != <span class="hljs-number">0x3f3f3f3f</span> &#123;<br>                <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = g.edge[e].to;<br>                <span class="hljs-keyword">if</span> g.depth[v] != <span class="hljs-number">0x3f3f3f3f</span> &#123;<br>                    e = g.edge[e].nxt;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                g.depth[v] = g.depth[u] + <span class="hljs-number">1</span>;<br>                g.gap[g.depth[v]] += <span class="hljs-number">1</span>;<br>                q.<span class="hljs-title function_ invoke__">push_back</span>(v);<br>                e = g.edge[e].nxt;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">/// Performs a DFS traversal of the residual graph to find a path from node `u` to the sink `t`.</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// Returns the maximum flow that can be pushed along the path.</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// # Arguments</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// `u`: The starting node of the path.</span><br>    <span class="hljs-comment">/// `flow`: The maximum flow to be pushed along the path.</span><br>    <span class="hljs-comment">/// `edges`: The vector of edges in the residual graph.</span><br>    <span class="hljs-comment">/// `cur`: The vector of current edges for each node in the residual graph.</span><br>    <span class="hljs-keyword">fn</span> <span class="hljs-title function_">dfs</span>(g: &amp;<span class="hljs-keyword">mut</span> Graph, u: <span class="hljs-type">usize</span>, flow: <span class="hljs-type">i32</span>, cur: &amp;<span class="hljs-keyword">mut</span> <span class="hljs-type">Vec</span>&lt;<span class="hljs-type">usize</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">i32</span> &#123;<br>        <span class="hljs-keyword">if</span> u == g.t || flow == <span class="hljs-number">0</span> &#123;<br>            <span class="hljs-keyword">return</span> flow;<br>        &#125;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">used</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">e</span> = cur[u];<br>        <span class="hljs-keyword">while</span> e != <span class="hljs-number">0x3f3f3f3f</span> &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-variable">v</span> = g.edge[e].to;<br>            <span class="hljs-keyword">if</span> g.depth[v] == g.depth[u] - <span class="hljs-number">1</span> &#123;<br>                <span class="hljs-keyword">let</span> <span class="hljs-variable">f</span> = <span class="hljs-title function_ invoke__">dfs</span>(<br>                    g,<br>                    v,<br>                    std::cmp::<span class="hljs-title function_ invoke__">min</span>(flow - used, g.edge[e].cap - g.edge[e].flow),<br>                    cur,<br>                );<br>                g.edge[e].flow += f;<br>                g.edge[e ^ <span class="hljs-number">1</span>].flow -= f;<br>                used += f;<br>                <span class="hljs-keyword">if</span> used == flow &#123;<br>                    <span class="hljs-keyword">return</span> used;<br>                &#125;<br>            &#125;<br>            e = g.edge[e].nxt;<br>            cur[u] = e;<br>        &#125;<br>        g.gap[g.depth[u]] -= <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> g.gap[g.depth[u]] == <span class="hljs-number">0</span> &#123;<br>            g.depth[g.s] = g.n + <span class="hljs-number">1</span>;<br>        &#125;<br>        g.depth[u] += <span class="hljs-number">1</span>;<br>        g.gap[g.depth[u]] += <span class="hljs-number">1</span>;<br>        used<br>    &#125;<br>    <span class="hljs-comment">/// Computes the maximum flow in the flow network using the Dinic&#x27;s algorithm.</span><br>    <span class="hljs-comment">///</span><br>    <span class="hljs-comment">/// This function repeatedly calls `bfs` to find a shortest augmenting path</span><br>    <span class="hljs-comment">/// and `dfs` to augment the flow along the path. The maximum flow is</span><br>    <span class="hljs-comment">/// accumulated in `maxflow` field.</span><br>    <span class="hljs-keyword">pub</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">isap</span>(g: &amp;<span class="hljs-keyword">mut</span> Graph) &#123;<br>        <span class="hljs-title function_ invoke__">generate_depth</span>(g);<br>        <span class="hljs-keyword">while</span> g.depth[g.s] &lt; g.n &#123;<br>            <span class="hljs-keyword">let</span> <span class="hljs-keyword">mut </span><span class="hljs-variable">cur</span> = g.head.<span class="hljs-title function_ invoke__">clone</span>();<br>            g.maxflow += <span class="hljs-title function_ invoke__">dfs</span>(g, g.s, std::<span class="hljs-type">i32</span>::MAX, &amp;<span class="hljs-keyword">mut</span> cur) <span class="hljs-keyword">as</span> <span class="hljs-type">isize</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Basic Reverse Engineering by using GDB</title>
    <link href="/posts/d1d01c28/"/>
    <url>/posts/d1d01c28/</url>
    
    <content type="html"><![CDATA[<!-- @format --><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>The challenge is to determine the correct set of five inputs expected by each of the four safes (s1, s2, s3, s4). Running the binary file prompts you to input guesses sequentially, as demonstrated below:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span><br>s1* s2* s3* s4*<br>$ ./s3<br>input 1 (of 5)? elephant-ears<br>input 2 (of 5)? one-two-three<br>input 3 (of 5)? at-the-end<br>input 4 (of 5)? open-two-door<br>***************************************<br>*********** ALARM TRIGGERED ***********<br>***************************************<br>$ ./s3<br>input 1 (of 5)? elephant-ears<br>input 2 (of 5)? one-two-three<br>input 3 (of 5)? at-the-end<br>input 4 (of 5)? open-the-door<br>input 5 (of 5)? alphabet-soup<br>!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<br>!!!!!!!!!!! SAFE OPENED !!!!!!!!!!!<br>!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<br></code></pre></td></tr></table></figure><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Step-1-Check-x86-instructions-by-using-objdump"><a href="#Step-1-Check-x86-instructions-by-using-objdump" class="headerlink" title="Step 1: Check x86 instructions by using objdump"></a>Step 1: Check x86 instructions by using objdump</h2><p>To analyze the binary, first convert it into human-readable assembly instructions:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">objdump -d s1 &gt; s1.txt<br></code></pre></td></tr></table></figure><p>This generates a text file, s1.txt, containing x86 assembly instructions. Focus on the main function, as it handles the input validation logic.</p><p>Here is a snippet of the main function from s1.txt:</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><br>    ...<br><br><span class="hljs-number">00001295</span> &lt;main&gt;:<br>    <span class="hljs-number">1295</span>: <span class="hljs-number">8</span>d <span class="hljs-number">4</span><span class="hljs-keyword">c</span> <span class="hljs-number">24</span> <span class="hljs-number">04</span>           lea    <span class="hljs-number">0x4</span>(<span class="hljs-variable">%esp</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%ecx</span><br>    <span class="hljs-number">1299</span>: <span class="hljs-number">83</span> e<span class="hljs-number">4</span> f<span class="hljs-number">0</span>              <span class="hljs-keyword">and</span>    $<span class="hljs-number">0xfffffff0</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span><br>    <span class="hljs-number">129</span><span class="hljs-keyword">c</span>: ff <span class="hljs-number">71</span> fc              push   <span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">4</span>(<span class="hljs-variable">%ecx</span>)<br>    <span class="hljs-number">129</span>f: <span class="hljs-number">55</span>                    push   <span class="hljs-variable">%ebp</span><br>    <span class="hljs-number">12</span>a<span class="hljs-number">0</span>: <span class="hljs-number">89</span> e<span class="hljs-number">5</span>                 mov    <span class="hljs-variable">%esp</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%ebp</span><br>    <span class="hljs-number">12</span>a<span class="hljs-number">2</span>: <span class="hljs-number">57</span>                    push   <span class="hljs-variable">%edi</span><br>    <span class="hljs-number">12</span>a<span class="hljs-number">3</span>: <span class="hljs-number">56</span>                    push   <span class="hljs-variable">%esi</span><br>    <span class="hljs-number">12</span>a<span class="hljs-number">4</span>: <span class="hljs-number">53</span>                    push   <span class="hljs-variable">%ebx</span><br>    <span class="hljs-number">12</span>a<span class="hljs-number">5</span>: <span class="hljs-number">51</span>                    push   <span class="hljs-variable">%ecx</span>  // prepare<br>    <span class="hljs-number">12</span>a<span class="hljs-number">6</span>: <span class="hljs-number">81</span> ec <span class="hljs-number">28</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>     <span class="hljs-keyword">sub</span>    $<span class="hljs-number">0x228</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span><br>    <span class="hljs-number">12</span>ac: e<span class="hljs-number">8</span> <span class="hljs-number">5</span>f fe ff ff        <span class="hljs-keyword">call</span>   <span class="hljs-number">1110</span> &lt;__x<span class="hljs-number">86</span>.get_pc_thunk.bx&gt;<br>    <span class="hljs-number">12</span>b<span class="hljs-number">1</span>: <span class="hljs-number">81</span> <span class="hljs-keyword">c</span><span class="hljs-number">3</span> <span class="hljs-number">07</span> <span class="hljs-number">2</span>d <span class="hljs-number">00</span> <span class="hljs-number">00</span>     <span class="hljs-keyword">add</span>    $<span class="hljs-number">0x2d07</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%ebx</span><br>    <span class="hljs-number">12</span>b<span class="hljs-number">7</span>: <span class="hljs-number">8</span>b <span class="hljs-number">51</span> <span class="hljs-number">04</span>              mov    <span class="hljs-number">0x4</span>(<span class="hljs-variable">%ecx</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%edx</span><br>    <span class="hljs-number">12</span>ba: <span class="hljs-number">65</span> a<span class="hljs-number">1</span> <span class="hljs-number">14</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>     mov    <span class="hljs-variable">%gs</span>:<span class="hljs-number">0x14</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span><br>    <span class="hljs-number">12</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span>: <span class="hljs-number">89</span> <span class="hljs-number">45</span> e<span class="hljs-number">4</span>              mov    <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span><span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-keyword">c</span>(<span class="hljs-variable">%ebp</span>)<br>    <span class="hljs-number">12</span><span class="hljs-keyword">c</span><span class="hljs-number">3</span>: <span class="hljs-number">31</span> <span class="hljs-keyword">c</span><span class="hljs-number">0</span>                 <span class="hljs-keyword">xor</span>    <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span>  // <span class="hljs-variable">%eax</span> <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span><br>    <span class="hljs-number">12</span><span class="hljs-keyword">c</span><span class="hljs-number">5</span>: <span class="hljs-number">8</span>b <span class="hljs-number">83</span> <span class="hljs-number">3</span><span class="hljs-keyword">c</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>     mov    <span class="hljs-number">0x3c</span>(<span class="hljs-variable">%ebx</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span><br>    <span class="hljs-number">12</span>cb: <span class="hljs-number">8</span>b <span class="hljs-number">38</span>                 mov    (<span class="hljs-variable">%eax</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%edi</span><br>    <span class="hljs-number">12</span>cd: <span class="hljs-number">83</span> <span class="hljs-number">39</span> <span class="hljs-number">02</span>              cmpl   $<span class="hljs-number">0x2</span><span class="hljs-punctuation">,</span>(<span class="hljs-variable">%ecx</span>)<br>    <span class="hljs-number">12</span>d<span class="hljs-number">0</span>: <span class="hljs-number">74</span> <span class="hljs-number">6</span>f                 je     <span class="hljs-number">1341</span> &lt;main<span class="hljs-number">+0</span>xac&gt;<br>    <span class="hljs-number">12</span>d<span class="hljs-number">2</span>: be <span class="hljs-number">01</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        mov    $<span class="hljs-number">0x1</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esi</span><br>    <span class="hljs-number">12</span>d<span class="hljs-number">7</span>: <span class="hljs-number">8</span>b <span class="hljs-number">83</span> <span class="hljs-number">3</span><span class="hljs-keyword">c</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>     mov    <span class="hljs-number">0x3c</span>(<span class="hljs-variable">%ebx</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span><br>    <span class="hljs-number">12</span>dd: <span class="hljs-number">89</span> <span class="hljs-number">85</span> d<span class="hljs-number">4</span> fd ff ff     mov    <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span><span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">22</span><span class="hljs-keyword">c</span>(<span class="hljs-variable">%ebp</span>)<br>    <span class="hljs-number">12e3</span>: <span class="hljs-number">8</span>d <span class="hljs-number">83</span> ea e<span class="hljs-number">0</span> ff ff     lea    <span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">1</span>f<span class="hljs-number">16</span>(<span class="hljs-variable">%ebx</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span><br>    <span class="hljs-number">12e9</span>: <span class="hljs-number">89</span> <span class="hljs-number">85</span> d<span class="hljs-number">0</span> fd ff ff     mov    <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span><span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">230</span>(<span class="hljs-variable">%ebp</span>)<br>    <span class="hljs-number">12</span>ef: <span class="hljs-number">83</span> fe <span class="hljs-number">06</span>              cmp    $<span class="hljs-number">0x6</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esi</span><br>    <span class="hljs-number">12</span>f<span class="hljs-number">2</span>: <span class="hljs-number">74</span> <span class="hljs-number">7</span>f                 je     <span class="hljs-number">1373</span> &lt;main<span class="hljs-number">+0</span>xde&gt;<br>    <span class="hljs-number">12</span>f<span class="hljs-number">4</span>: <span class="hljs-number">8</span>b <span class="hljs-number">85</span> d<span class="hljs-number">4</span> fd ff ff     mov    <span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">22</span><span class="hljs-keyword">c</span>(<span class="hljs-variable">%ebp</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span><br>    <span class="hljs-number">12</span>fa: <span class="hljs-number">39</span> <span class="hljs-number">38</span>                 cmp    <span class="hljs-variable">%edi</span><span class="hljs-punctuation">,</span>(<span class="hljs-variable">%eax</span>)<br>    <span class="hljs-number">12</span>fc: <span class="hljs-number">74</span> <span class="hljs-number">5</span>f                 je     <span class="hljs-number">135</span>d &lt;main<span class="hljs-number">+0</span>xc<span class="hljs-number">8</span>&gt;<br>    <span class="hljs-number">12</span>fe: <span class="hljs-number">83</span> ec <span class="hljs-number">04</span>              <span class="hljs-keyword">sub</span>    $<span class="hljs-number">0x4</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span><br>    <span class="hljs-number">1301</span>: <span class="hljs-number">57</span>                    push   <span class="hljs-variable">%edi</span><br>    <span class="hljs-number">1302</span>: <span class="hljs-number">68</span> <span class="hljs-number">00</span> <span class="hljs-number">02</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        push   $<span class="hljs-number">0x200</span><br>    <span class="hljs-number">1307</span>: <span class="hljs-number">8</span>d <span class="hljs-number">85</span> e<span class="hljs-number">4</span> fd ff ff     lea    <span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">21</span><span class="hljs-keyword">c</span>(<span class="hljs-variable">%ebp</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span><br>    <span class="hljs-number">130</span>d: <span class="hljs-number">50</span>                    push   <span class="hljs-variable">%eax</span><br>    <span class="hljs-number">130</span>e: e<span class="hljs-number">8</span> <span class="hljs-number">3</span>d fd ff ff        <span class="hljs-keyword">call</span>   <span class="hljs-number">1050</span> &lt;fgets<span class="hljs-title">@plt</span>&gt;<br>    <span class="hljs-number">1313</span>: <span class="hljs-number">83</span> <span class="hljs-keyword">c</span><span class="hljs-number">4</span> <span class="hljs-number">10</span>              <span class="hljs-keyword">add</span>    $<span class="hljs-number">0x10</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span><br>    <span class="hljs-number">1316</span>: <span class="hljs-number">85</span> <span class="hljs-keyword">c</span><span class="hljs-number">0</span>                 test   <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span><br>    <span class="hljs-number">1318</span>: <span class="hljs-number">74</span> d<span class="hljs-number">5</span>                 je     <span class="hljs-number">12</span>ef &lt;main<span class="hljs-number">+0</span><span class="hljs-keyword">x</span><span class="hljs-number">5</span>a&gt;<br>    <span class="hljs-number">131</span>a: <span class="hljs-number">83</span> ec <span class="hljs-number">04</span>              <span class="hljs-keyword">sub</span>    $<span class="hljs-number">0x4</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span><br>    <span class="hljs-number">131</span>d: <span class="hljs-number">6</span>a <span class="hljs-number">0</span>a                 push   $<span class="hljs-number">0xa</span><br>    <span class="hljs-number">131</span>f: <span class="hljs-number">6</span>a <span class="hljs-number">00</span>                 push   $<span class="hljs-number">0x0</span><br>    <span class="hljs-number">1321</span>: <span class="hljs-number">8</span>d <span class="hljs-number">85</span> e<span class="hljs-number">4</span> fd ff ff     lea    <span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">21</span><span class="hljs-keyword">c</span>(<span class="hljs-variable">%ebp</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span><br>    <span class="hljs-number">1327</span>: <span class="hljs-number">50</span>                    push   <span class="hljs-variable">%eax</span><br>    <span class="hljs-number">1328</span>: e<span class="hljs-number">8</span> <span class="hljs-number">93</span> fd ff ff        <span class="hljs-keyword">call</span>   <span class="hljs-number">10</span><span class="hljs-keyword">c</span><span class="hljs-number">0</span> &lt;strtol<span class="hljs-title">@plt</span>&gt;<br>    <span class="hljs-number">132</span>d: <span class="hljs-number">83</span> <span class="hljs-keyword">c</span><span class="hljs-number">6</span> <span class="hljs-number">01</span>              <span class="hljs-keyword">add</span>    $<span class="hljs-number">0x1</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esi</span><br>    <span class="hljs-number">1330</span>: <span class="hljs-number">83</span> <span class="hljs-keyword">c</span><span class="hljs-number">4</span> <span class="hljs-number">10</span>              <span class="hljs-keyword">add</span>    $<span class="hljs-number">0x10</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span><br>    <span class="hljs-number">1333</span>: <span class="hljs-number">39</span> <span class="hljs-number">84</span> b<span class="hljs-number">3</span> <span class="hljs-number">50</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  cmp    <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span><span class="hljs-number">0x50</span>(<span class="hljs-variable">%ebx</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esi</span><span class="hljs-punctuation">,</span><span class="hljs-number">4</span>)<br>    <span class="hljs-number">133</span>a: <span class="hljs-number">74</span> a<span class="hljs-number">7</span>                 je     <span class="hljs-number">12e3</span> &lt;main<span class="hljs-number">+0</span><span class="hljs-keyword">x</span><span class="hljs-number">4</span>e&gt;<br>    <span class="hljs-number">133</span><span class="hljs-keyword">c</span>: e<span class="hljs-number">8</span> <span class="hljs-keyword">cc</span> fe ff ff        <span class="hljs-keyword">call</span>   <span class="hljs-number">120</span>d &lt;fail&gt;<br>    <span class="hljs-number">1341</span>: <span class="hljs-number">83</span> ec <span class="hljs-number">08</span>              <span class="hljs-keyword">sub</span>    $<span class="hljs-number">0x8</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span><br>    <span class="hljs-number">1344</span>: <span class="hljs-number">8</span>d <span class="hljs-number">83</span> e<span class="hljs-number">8</span> e<span class="hljs-number">0</span> ff ff     lea    <span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">1</span>f<span class="hljs-number">18</span>(<span class="hljs-variable">%ebx</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span><br>    <span class="hljs-number">134</span>a: <span class="hljs-number">50</span>                    push   <span class="hljs-variable">%eax</span><br>    <span class="hljs-number">134</span>b: ff <span class="hljs-number">72</span> <span class="hljs-number">04</span>              push   <span class="hljs-number">0x4</span>(<span class="hljs-variable">%edx</span>)<br>    <span class="hljs-number">134</span>e: e<span class="hljs-number">8</span> <span class="hljs-number">4</span>d fd ff ff        <span class="hljs-keyword">call</span>   <span class="hljs-number">10</span>a<span class="hljs-number">0</span> &lt;fopen<span class="hljs-title">@plt</span>&gt;<br>    <span class="hljs-number">1353</span>: <span class="hljs-number">89</span> <span class="hljs-keyword">c</span><span class="hljs-number">7</span>                 mov    <span class="hljs-variable">%eax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%edi</span><br>    <span class="hljs-number">1355</span>: <span class="hljs-number">83</span> <span class="hljs-keyword">c</span><span class="hljs-number">4</span> <span class="hljs-number">10</span>              <span class="hljs-keyword">add</span>    $<span class="hljs-number">0x10</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span><br>    <span class="hljs-number">1358</span>: e<span class="hljs-number">9</span> <span class="hljs-number">75</span> ff ff ff        jmp    <span class="hljs-number">12</span>d<span class="hljs-number">2</span> &lt;main<span class="hljs-number">+0</span><span class="hljs-keyword">x</span><span class="hljs-number">3</span>d&gt;<br>    <span class="hljs-number">135</span>d: <span class="hljs-number">83</span> ec <span class="hljs-number">04</span>              <span class="hljs-keyword">sub</span>    $<span class="hljs-number">0x4</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span><br>    <span class="hljs-number">1360</span>: <span class="hljs-number">56</span>                    push   <span class="hljs-variable">%esi</span><br>    <span class="hljs-number">1361</span>: ff b<span class="hljs-number">5</span> d<span class="hljs-number">0</span> fd ff ff     push   <span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">230</span>(<span class="hljs-variable">%ebp</span>)<br>    <span class="hljs-number">1367</span>: <span class="hljs-number">6</span>a <span class="hljs-number">01</span>                 push   $<span class="hljs-number">0x1</span><br>    <span class="hljs-number">1369</span>: e<span class="hljs-number">8</span> <span class="hljs-number">42</span> fd ff ff        <span class="hljs-keyword">call</span>   <span class="hljs-number">10</span>b<span class="hljs-number">0</span> &lt;__printf_chk<span class="hljs-title">@plt</span>&gt;<br>    <span class="hljs-number">136</span>e: <span class="hljs-number">83</span> <span class="hljs-keyword">c</span><span class="hljs-number">4</span> <span class="hljs-number">10</span>              <span class="hljs-keyword">add</span>    $<span class="hljs-number">0x10</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span><br>    <span class="hljs-number">1371</span>: eb <span class="hljs-number">8</span>b                 jmp    <span class="hljs-number">12</span>fe &lt;main<span class="hljs-number">+0</span><span class="hljs-keyword">x</span><span class="hljs-number">69</span>&gt;<br>    <span class="hljs-number">1373</span>: e<span class="hljs-number">8</span> dc fe ff ff        <span class="hljs-keyword">call</span>   <span class="hljs-number">1254</span> &lt;success&gt;<br>    <span class="hljs-number">1378</span>: <span class="hljs-number">8</span>b <span class="hljs-number">45</span> e<span class="hljs-number">4</span>              mov    <span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-keyword">c</span>(<span class="hljs-variable">%ebp</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span><br>    <span class="hljs-number">137</span>b: <span class="hljs-number">65</span> <span class="hljs-number">2</span>b <span class="hljs-number">05</span> <span class="hljs-number">14</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  <span class="hljs-keyword">sub</span>    <span class="hljs-variable">%gs</span>:<span class="hljs-number">0x14</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span><br>    <span class="hljs-number">1382</span>: <span class="hljs-number">75</span> <span class="hljs-number">11</span>                 jne    <span class="hljs-number">1395</span> &lt;main<span class="hljs-number">+0</span><span class="hljs-keyword">x</span><span class="hljs-number">100</span>&gt;<br>    <span class="hljs-number">1384</span>: b<span class="hljs-number">8</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        mov    $<span class="hljs-number">0x0</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%eax</span><br>    <span class="hljs-number">1389</span>: <span class="hljs-number">8</span>d <span class="hljs-number">65</span> f<span class="hljs-number">0</span>              lea    <span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">10</span>(<span class="hljs-variable">%ebp</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span><br>    <span class="hljs-number">138</span><span class="hljs-keyword">c</span>: <span class="hljs-number">59</span>                    pop    <span class="hljs-variable">%ecx</span><br>    <span class="hljs-number">138</span>d: <span class="hljs-number">5</span>b                    pop    <span class="hljs-variable">%ebx</span><br>    <span class="hljs-number">138</span>e: <span class="hljs-number">5</span>e                    pop    <span class="hljs-variable">%esi</span><br>    <span class="hljs-number">138</span>f: <span class="hljs-number">5</span>f                    pop    <span class="hljs-variable">%edi</span><br>    <span class="hljs-number">1390</span>: <span class="hljs-number">5</span>d                    pop    <span class="hljs-variable">%ebp</span><br>    <span class="hljs-number">1391</span>: <span class="hljs-number">8</span>d <span class="hljs-number">61</span> fc              lea    <span class="hljs-number">-0</span><span class="hljs-keyword">x</span><span class="hljs-number">4</span>(<span class="hljs-variable">%ecx</span>)<span class="hljs-punctuation">,</span><span class="hljs-variable">%esp</span><br>    <span class="hljs-number">1394</span>: <span class="hljs-keyword">c</span><span class="hljs-number">3</span>                    <span class="hljs-keyword">ret</span><br>    <span class="hljs-number">1395</span>: e<span class="hljs-number">8</span> <span class="hljs-number">06</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>        <span class="hljs-keyword">call</span>   <span class="hljs-number">13</span>a<span class="hljs-number">0</span> &lt;__stack_chk_fail_local&gt;<br>    <span class="hljs-number">139</span>a: <span class="hljs-number">66</span> <span class="hljs-number">90</span>                 <span class="hljs-keyword">xchg</span>   <span class="hljs-variable">%ax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%ax</span><br>    <span class="hljs-number">139</span><span class="hljs-keyword">c</span>: <span class="hljs-number">66</span> <span class="hljs-number">90</span>                 <span class="hljs-keyword">xchg</span>   <span class="hljs-variable">%ax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%ax</span><br>    <span class="hljs-number">139</span>e: <span class="hljs-number">66</span> <span class="hljs-number">90</span>                 <span class="hljs-keyword">xchg</span>   <span class="hljs-variable">%ax</span><span class="hljs-punctuation">,</span><span class="hljs-variable">%ax</span><br><br>    ...<br></code></pre></td></tr></table></figure><h2 id="Step-2-Analysis-main-function"><a href="#Step-2-Analysis-main-function" class="headerlink" title="Step 2: Analysis main function"></a>Step 2: Analysis main function</h2><p>Now we have two choices of reading this list of instructions. First is translating these instructions one by one. Second is rebulid the control flow reversely. I choose the second way.</p><p>By observation, we can see there two sentences call success and fail functions:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">1373:</span> <span class="hljs-string">e8</span> <span class="hljs-string">dc</span> <span class="hljs-string">fe</span> <span class="hljs-string">ff</span> <span class="hljs-string">ff</span>        <span class="hljs-string">call</span>   <span class="hljs-number">1254</span> <span class="hljs-string">&lt;success&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-number">133</span><span class="hljs-keyword">c</span>: e<span class="hljs-number">8</span> <span class="hljs-keyword">cc</span> fe ff ff        <span class="hljs-keyword">call</span>   <span class="hljs-number">120</span>d &lt;fail&gt;<br></code></pre></td></tr></table></figure><p>Looking into it, we can find the sentence before the success function call is a jmp instruction to previous lines. So success function cannot be entered by sequence control flow. So we check the jmp instruction that jumps to 1373.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">12e3</span>: <span class="hljs-number">8</span>d <span class="hljs-number">83</span> ea e0 ff ff     lea    -<span class="hljs-number">0</span>x1f16(%ebx),%eax<br><span class="hljs-attribute">12e9</span>: <span class="hljs-number">89</span> <span class="hljs-number">85</span> d0 fd ff ff     mov    %eax,-<span class="hljs-number">0</span>x230(%ebp)<br><span class="hljs-attribute">12ef</span>: <span class="hljs-number">83</span> fe <span class="hljs-number">06</span>              cmp    $<span class="hljs-number">0</span>x6,%esi<br><span class="hljs-attribute">12f2</span>: <span class="hljs-number">74</span> <span class="hljs-number">7</span>f                 je     <span class="hljs-number">1373</span> &lt;main+<span class="hljs-number">0</span>xde&gt;<br></code></pre></td></tr></table></figure><p>So these are sentences jumps to 1373 and its requirements. We can see “%esi &#x3D;&#x3D; 6” is the key point to trigger success function. So we continue looking into sentences that change register %esi.</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">132d</span>: <span class="hljs-number">83</span> c6 <span class="hljs-number">01</span>              add    $<span class="hljs-number">0</span>x1,%esi<br><span class="hljs-attribute">1330</span>: <span class="hljs-number">83</span> c4 <span class="hljs-number">10</span>              add    $<span class="hljs-number">0</span>x10,%esp<br><span class="hljs-attribute">1333</span>: <span class="hljs-number">39</span> <span class="hljs-number">84</span> b3 <span class="hljs-number">50</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span> <span class="hljs-number">00</span>  cmp    %eax,<span class="hljs-number">0</span>x50(%ebx,%esi,<span class="hljs-number">4</span>)<br><span class="hljs-attribute">133a</span>: <span class="hljs-number">74</span> a7                 je     <span class="hljs-number">12</span>e3 &lt;main+<span class="hljs-number">0</span>x4e&gt;<br></code></pre></td></tr></table></figure><p>These instructions is the only place that changes %esi’s value and jump to the previous block. So the requirements of this block is “%eax &#x3D;&#x3D; %ebx + %esi _ 4 + 0x50”, which %eax is the result of strtol of our inputs. Now the requirement is clear: our inputs must be an integer and equals to value in “%ebx + %esi * 4 + 0x50”.</p><h2 id="Step-3-Using-GDB-to-get-password"><a href="#Step-3-Using-GDB-to-get-password" class="headerlink" title="Step 3: Using GDB to get password"></a>Step 3: Using GDB to get password</h2><p>The last step is adding a break point at instruction 1333, which is the compare operation. Can print the value in “0x50(%ebx,%esi,4)” so we can get the answer.</p><ol><li>Use gdb to open the file and add a breakpoint at main function:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ gdb ./s1<br>(gdb) <span class="hljs-built_in">break</span> main<br>Breakpoint 1 at 0x12a6<br></code></pre></td></tr></table></figure><ol start="2"><li>Start to run:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) run<br>Starting program: /home/hyjing/Onedrive/ClassFiles/Comp Sci 354/p5/s1<br>[Thread debugging using libthread_db enabled]<br>Using host libthread_db library <span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libthread_db.so.1&quot;</span>.<br><br>Breakpoint 1, 0x565562a6 <span class="hljs-keyword">in</span> main ()<br></code></pre></td></tr></table></figure><ol start="3"><li>Add the second breakpoint at 1333:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) <span class="hljs-built_in">break</span> *0x56556333<br>Breakpoint 2 at 0x56556333<br>(gdb) <span class="hljs-built_in">continue</span><br>Continuing.<br>input 1 (of 5)? [Any Input]<br><br>Breakpoint 2, 0x56556333 <span class="hljs-keyword">in</span> main ()<br></code></pre></td></tr></table></figure><ol start="4"><li>Get the point and start to print the result:</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">(gdb) <span class="hljs-built_in">print</span> *(0x50 + <span class="hljs-variable">$ebx</span> + 4*<span class="hljs-variable">$esi</span>)<br><span class="hljs-variable">$1</span> = 352303<br>(gdb) <span class="hljs-built_in">print</span> *(0x50 + <span class="hljs-variable">$ebx</span> + 4*(<span class="hljs-variable">$esi</span> + 1))<br><span class="hljs-variable">$2</span> = 855053<br>(gdb) <span class="hljs-built_in">print</span> *(0x50 + <span class="hljs-variable">$ebx</span> + 4*(<span class="hljs-variable">$esi</span> + 2))<br><span class="hljs-variable">$3</span> = 170240<br>(gdb) <span class="hljs-built_in">print</span> *(0x50 + <span class="hljs-variable">$ebx</span> + 4*(<span class="hljs-variable">$esi</span> + 3))<br><span class="hljs-variable">$4</span> = 4961<br>(gdb) <span class="hljs-built_in">print</span> *(0x50 + <span class="hljs-variable">$ebx</span> + 4*(<span class="hljs-variable">$esi</span> + 4))<br><span class="hljs-variable">$5</span> = 108932<br></code></pre></td></tr></table></figure><ol start="5"><li>Get the five passwords, save them in s1.solution and check them.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ ./s1 &lt; s1.solution<br>input 1 (of 5)? input 2 (of 5)? input 3 (of 5)? input 4 (of 5)? input 5 (of 5)? !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<br>!!!!!!!!!!! SAFE OPENED !!!!!!!!!!!<br>!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Reverse Engineering</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
